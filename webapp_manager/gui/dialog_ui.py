"""
Interfaz gr√°fica usando Python Dialog para WebApp Manager
Dise√±ada espec√≠ficamente para servidores Linux
"""

import os
import sys
import time
import subprocess
import tempfile
import re
from pathlib import Path
from typing import Optional, List, Dict, Any
import json

try:
    from dialog import Dialog
except ImportError:
    print("‚ùå Error: pythondialog no est√° instalado")
    print("   Ejecuta: pip3 install pythondialog")
    sys.exit(1)

from ..models import AppConfig
from ..core.manager import WebAppManager
from ..utils import Colors


class DialogUI:
    """Interfaz gr√°fica usando Dialog para terminales Linux"""
    
    def __init__(self):
        """Inicializar la interfaz Dialog"""
        self.d = Dialog(dialog="dialog")
        self.d.set_background_title("WebApp Manager v4.0 - Sistema Modular para Linux")
        
        # Configurar tama√±o por defecto
        self.height = 20
        self.width = 70
        
        # Habilitar modo GUI para filtrar logs
        self.gui_mode = True
        
        # Inicializar manager
        try:
            self.manager = WebAppManager()
            # Configurar el manager para modo GUI
            if hasattr(self.manager, 'set_gui_mode'):
                self.manager.set_gui_mode(True)
        except Exception as e:
            self.show_error(f"Error al inicializar WebApp Manager: {e}")
            sys.exit(1)
    
    def clean_ansi_sequences(self, text: str) -> str:
        """Limpiar secuencias de escape ANSI de los logs para la interfaz gr√°fica"""
        if not text:
            return text
        
        # Patrones para secuencias de escape ANSI
        ansi_patterns = [
            r'\x1b\[[0-9;]*m',  # C√≥digos de color
            r'\x1b\[[0-9;]*[a-zA-Z]',  # Otros c√≥digos de escape
            r'\x1b\]0;[^\x07]*\x07',  # T√≠tulos de ventana
            r'\x1b\[[0-9]+;[0-9]+[Hf]',  # Posicionamiento del cursor
            r'\x1b\[[0-9]*[ABCD]',  # Movimiento del cursor
            r'\x1b\[[0-9]*[JK]',  # Limpieza de l√≠neas
            r'\x1b\[2J',  # Limpieza de pantalla
            r'\x1b\[H',  # Cursor a home
            r'\x1b\[?[0-9]*[hl]',  # Modos de pantalla
            r'\x1b\[[0-9]*[~]',  # Teclas especiales
            r'\x1b\[?[0-9]*[hl]',  # Modos de terminal
            r'\x1b\[=[0-9]*[hl]',  # Modos de aplicaci√≥n
            r'\x1b\[[0-9]*[pqrs]',  # Modos de cursor
            r'\x1b\[c',  # Identificaci√≥n de terminal
            r'\x1b\[6n',  # Posici√≥n del cursor
            r'\x1b\[0?[0-9]*[JK]',  # Limpieza condicional
            r'\x1b\[(\?)?[0-9]*[lh]',  # Modos de terminal
            r'\x1b\[?[0-9]*[lh]',  # Modos de terminal
            r'\x1b\[<[0-9]*[mM]',  # Modos de rat√≥n
            r'\x1b\[>[0-9]*[mM]',  # Modos de rat√≥n
            r'\x1b\[!p',  # Reset
            r'\x1b\[?25[lh]',  # Cursor visible/invisible
            r'\x1b\[?47[lh]',  # Pantalla alternativa
            r'\x1b\[?1049[lh]',  # Pantalla alternativa
            r'\x1b\[?1[lh]',  # Modo de aplicaci√≥n
            r'\x1b\[?7[lh]',  # Wrap mode
            r'\x1b\[?12[lh]',  # Blink cursor
            r'\x1b\[?25[lh]',  # Show cursor
            r'\x1b\[?1000[lh]',  # Mouse tracking
            r'\x1b\[?1002[lh]',  # Mouse tracking
            r'\x1b\[?1003[lh]',  # Mouse tracking
            r'\x1b\[?1006[lh]',  # Mouse tracking
        ]
        
        # Limpiar cada patr√≥n
        cleaned_text = text
        for pattern in ansi_patterns:
            cleaned_text = re.sub(pattern, '', cleaned_text)
        
        # Limpiar caracteres de control comunes
        cleaned_text = re.sub(r'\x1b\[[0-9;]*[a-zA-Z]', '', cleaned_text)
        cleaned_text = re.sub(r'\x1b\].*?\x07', '', cleaned_text)
        cleaned_text = re.sub(r'\x1b[()][AB012]', '', cleaned_text)
        cleaned_text = re.sub(r'\x1b[=>]', '', cleaned_text)
        cleaned_text = re.sub(r'\x1b[PX^_].*?\x1b\\', '', cleaned_text)
        
        # Limpiar otros caracteres de control
        cleaned_text = re.sub(r'[\x00-\x1f\x7f-\x9f]', '', cleaned_text)
        
        # Limpiar l√≠neas vac√≠as m√∫ltiples
        cleaned_text = re.sub(r'\n\s*\n', '\n', cleaned_text)
        
        return cleaned_text.strip()
    
    def format_log_for_gui(self, log_text: str) -> str:
        """Formatear logs espec√≠ficamente para la interfaz gr√°fica"""
        if not log_text:
            return "No hay logs disponibles"
        
        # Limpiar secuencias ANSI
        cleaned_text = self.clean_ansi_sequences(log_text)
        
        # Formatear para mejor legibilidad en la GUI
        lines = cleaned_text.split('\n')
        formatted_lines = []
        
        for line in lines:
            if line.strip():  # Solo procesar l√≠neas no vac√≠as
                # Agregar timestamp si no lo tiene
                if not re.match(r'^\d{4}-\d{2}-\d{2}', line):
                    formatted_lines.append(f"[LOG] {line}")
                else:
                    formatted_lines.append(line)
        
        return '\n'.join(formatted_lines)
    
    def show_progress_with_logs(self, title: str, total_steps: int = 100):
        """Mostrar progreso con logs integrados en la GUI"""
        self.d.gauge_start(
            "Iniciando proceso...",
            height=10,
            width=65,
            title=title
        )
        return True
    
    def update_progress_with_logs(self, percent: int, message: str, log_data: str = None):
        """Actualizar progreso con logs limpios para GUI"""
        # Limpiar el mensaje para la GUI
        clean_message = self.clean_ansi_sequences(message)
        
        # Actualizar el gauge con mensaje limpio
        self.d.gauge_update(percent, clean_message)
        
        # Si hay logs adicionales, los guardamos para mostrar despu√©s
        if log_data:
            self.last_operation_logs = self.format_log_for_gui(log_data)
    
    def finish_progress_with_logs(self):
        """Finalizar progreso y mostrar logs si es necesario"""
        self.d.gauge_stop()
        
        # Si hay logs guardados, mostrarlos despu√©s del progreso
        if hasattr(self, 'last_operation_logs') and self.last_operation_logs:
            code = self.d.yesno(
                "¬øDeseas ver los logs detallados de la operaci√≥n?",
                height=8,
                width=50,
                title="Logs Disponibles"
            )
            
            if code == self.d.OK:
                self.d.scrollbox(
                    self.last_operation_logs,
                    height=20,
                    width=80,
                    title="Logs de la Operaci√≥n"
                )
            
            # Limpiar logs despu√©s de mostrar
            self.last_operation_logs = ""
    
    def run(self):
        """Ejecutar la interfaz gr√°fica"""
        self.show_welcome()
        
        while True:
            choice = self.show_main_menu()
            
            if choice == "1":
                self.show_apps_menu()
            elif choice == "2":
                self.show_deploy_menu()
            elif choice == "3":
                self.show_system_menu()
            elif choice == "4":
                self.show_help()
            elif choice == "5":
                break
            else:
                self.show_error("Opci√≥n no v√°lida")
    
    def show_welcome(self):
        """Mostrar pantalla de bienvenida"""
        welcome_text = """
üöÄ WebApp Manager v4.0
Sistema Modular para Linux

Caracter√≠sticas:
‚Ä¢ Interfaz gr√°fica terminal con Dialog
‚Ä¢ Deployers modulares (NextJS, FastAPI, Node.js, Static)
‚Ä¢ Auto-detecci√≥n de tipos de aplicaciones
‚Ä¢ Gesti√≥n autom√°tica de nginx y systemd
‚Ä¢ Monitoreo integrado y reparaci√≥n autom√°tica
‚Ä¢ Backup autom√°tico de configuraciones

Dise√±ado exclusivamente para servidores Linux
        """
        
        self.d.msgbox(welcome_text, height=18, width=65, title="Bienvenido")
    
    def show_main_menu(self):
        """Mostrar men√∫ principal"""
        choices = [
            ("1", "üì± Gesti√≥n de Aplicaciones"),
            ("2", "üöÄ Desplegar Nueva Aplicaci√≥n"),
            ("3", "üîß Configuraci√≥n del Sistema"),
            ("4", "‚ùì Ayuda"),
            ("5", "üö™ Salir")
        ]
        
        code, tag = self.d.menu(
            "Selecciona una opci√≥n:",
            choices=choices,
            height=15,
            width=50,
            title="Men√∫ Principal"
        )
        
        if code == self.d.OK:
            return tag
        else:
            return "5"  # Salir si se cancela
    
    def show_apps_menu(self):
        """Mostrar men√∫ de aplicaciones mejorado"""
        while True:
            # Obtener lista de aplicaciones
            apps = self.manager.list_apps()
            
            if not apps:
                self.d.msgbox(
                    "No hay aplicaciones desplegadas.\n\n"
                    "Usa la opci√≥n 'Desplegar Nueva Aplicaci√≥n' para agregar una.",
                    height=8,
                    width=50,
                    title="Sin Aplicaciones"
                )
                return
            
            # Mostrar estad√≠sticas de aplicaciones
            self.show_apps_stats(apps)
            
            # Seleccionar aplicaci√≥n para gestionar
            selected_app = self.select_app_for_management(apps)
            if not selected_app:
                break
            
            # Mostrar men√∫ de gesti√≥n para la aplicaci√≥n seleccionada
            self.show_app_management_menu(selected_app, apps)
    
    def show_apps_stats(self, apps: List[AppConfig]):
        """Mostrar estad√≠sticas de aplicaciones"""
        try:
            # Calcular estad√≠sticas
            total_apps = len(apps)
            active_apps = len([app for app in apps if getattr(app, 'status', 'unknown') == 'active'])
            ssl_apps = len([app for app in apps if getattr(app, 'ssl', False)])
            
            # Conteo por tipo
            app_types = {}
            for app in apps:
                app_type = getattr(app, 'app_type', 'unknown')
                app_types[app_type] = app_types.get(app_type, 0) + 1
            
            # Crear texto de estad√≠sticas
            stats_text = f"""
ESTAD√çSTICAS DE APLICACIONES
{'=' * 28}

RESUMEN GENERAL:
  Total de aplicaciones: {total_apps}
  Aplicaciones activas: {active_apps}
  Aplicaciones inactivas: {total_apps - active_apps}
  Con SSL habilitado: {ssl_apps}

DISTRIBUCI√ìN POR TIPO:
"""
            
            for app_type, count in app_types.items():
                stats_text += f"  {app_type}: {count} aplicaci√≥n{'es' if count != 1 else ''}\n"
            
            stats_text += f"""
ESTADO DE SERVICIOS:
  üü¢ Activos: {active_apps}
  üî¥ Inactivos: {total_apps - active_apps}
  üîí Con SSL: {ssl_apps}
  üîì Sin SSL: {total_apps - ssl_apps}

UBICACIONES:
  Aplicaciones: /var/www/apps/
  Configuraci√≥n nginx: /etc/nginx/sites-available/
  Servicios systemd: /etc/systemd/system/
            """
            
            self.d.msgbox(stats_text, height=18, width=65, title="Estad√≠sticas")
            
        except Exception as e:
            self.show_error(f"Error obteniendo estad√≠sticas: {e}")
    
    def select_app_for_management(self, apps: List[AppConfig]):
        """Seleccionar aplicaci√≥n para gestionar con opciones adicionales"""
        # Crear lista de aplicaciones con estado
        choices = []
        for i, app in enumerate(apps):
            try:
                domain = getattr(app, 'domain', f'App {i+1}')
                app_type = getattr(app, 'app_type', 'unknown')
                status = getattr(app, 'status', 'unknown')
                port = getattr(app, 'port', 'N/A')
                ssl = getattr(app, 'ssl', False)
                
                # Indicadores de estado
                status_icon = "üü¢" if status == "active" else "üî¥"
                ssl_icon = "üîí" if ssl else "üîì"
                
                display_text = f"{status_icon} {domain} ({app_type}:{port}) {ssl_icon}"
                choices.append((str(i), display_text))
            except Exception as e:
                choices.append((str(i), f"‚ùå Error: {str(e)[:30]}..."))
        
        # Agregar opciones adicionales
        choices.insert(0, ("stats", "üìä Ver Estad√≠sticas"))
        choices.insert(1, ("list", "üìã Ver Lista Completa"))
        choices.insert(2, ("filter", "üîç Filtrar Aplicaciones"))
        choices.append(("bulk", "üì¶ Operaciones en Lote"))
        choices.append(("back", "‚¨ÖÔ∏è Volver al Men√∫ Principal"))
        
        code, tag = self.d.menu(
            "Selecciona una aplicaci√≥n para gestionar:",
            choices=choices,
            height=min(20, len(choices) + 5),
            width=70,
            title="Gesti√≥n de Aplicaciones"
        )
        
        if code != self.d.OK or tag == "back":
            return None
        elif tag == "stats":
            self.show_apps_stats(apps)
            return self.select_app_for_management(apps)
        elif tag == "list":
            self.show_apps_list(apps)
            return self.select_app_for_management(apps)
        elif tag == "filter":
            filtered_apps = self.filter_applications(apps)
            if filtered_apps:
                return self.select_app_for_management(filtered_apps)
            else:
                return self.select_app_for_management(apps)
        elif tag == "bulk":
            self.bulk_operations(apps)
            return self.select_app_for_management(apps)
        else:
            try:
                app_index = int(tag)
                return apps[app_index]
            except (ValueError, IndexError):
                self.show_error("Selecci√≥n inv√°lida")
                return None
    
    def filter_applications(self, apps: List[AppConfig]):
        """Filtrar aplicaciones por criterios"""
        filter_choices = [
            ("type", "üì± Por Tipo de Aplicaci√≥n"),
            ("status", "üîç Por Estado"),
            ("ssl", "üîí Por Configuraci√≥n SSL"),
            ("port", "üö™ Por Rango de Puertos"),
            ("back", "‚¨ÖÔ∏è Volver")
        ]
        
        code, filter_type = self.d.menu(
            "Selecciona el criterio de filtrado:",
            choices=filter_choices,
            height=12,
            width=50,
            title="Filtrar Aplicaciones"
        )
        
        if code != self.d.OK or filter_type == "back":
            return None
        
        filtered_apps = []
        
        try:
            if filter_type == "type":
                # Obtener tipos √∫nicos
                app_types = list(set(getattr(app, 'app_type', 'unknown') for app in apps))
                type_choices = [(t, t) for t in app_types]
                
                code, selected_type = self.d.menu(
                    "Selecciona el tipo de aplicaci√≥n:",
                    choices=type_choices,
                    height=12,
                    width=50,
                    title="Filtrar por Tipo"
                )
                
                if code == self.d.OK:
                    filtered_apps = [app for app in apps if getattr(app, 'app_type', 'unknown') == selected_type]
                    
            elif filter_type == "status":
                status_choices = [
                    ("active", "üü¢ Activas"),
                    ("inactive", "üî¥ Inactivas")
                ]
                
                code, selected_status = self.d.menu(
                    "Selecciona el estado:",
                    choices=status_choices,
                    height=10,
                    width=40,
                    title="Filtrar por Estado"
                )
                
                if code == self.d.OK:
                    if selected_status == "active":
                        filtered_apps = [app for app in apps if getattr(app, 'status', 'unknown') == 'active']
                    else:
                        filtered_apps = [app for app in apps if getattr(app, 'status', 'unknown') != 'active']
                        
            elif filter_type == "ssl":
                ssl_choices = [
                    ("with_ssl", "üîí Con SSL"),
                    ("without_ssl", "üîì Sin SSL")
                ]
                
                code, ssl_filter = self.d.menu(
                    "Selecciona configuraci√≥n SSL:",
                    choices=ssl_choices,
                    height=10,
                    width=40,
                    title="Filtrar por SSL"
                )
                
                if code == self.d.OK:
                    if ssl_filter == "with_ssl":
                        filtered_apps = [app for app in apps if getattr(app, 'ssl', False)]
                    else:
                        filtered_apps = [app for app in apps if not getattr(app, 'ssl', False)]
            
            # Mostrar resultados del filtro
            if filtered_apps:
                self.d.msgbox(
                    f"Filtro aplicado: {len(filtered_apps)} aplicaciones encontradas",
                    height=8,
                    width=50,
                    title="Resultados del Filtro"
                )
                return filtered_apps
            else:
                self.d.msgbox(
                    "No se encontraron aplicaciones que coincidan con el filtro",
                    height=8,
                    width=50,
                    title="Sin Resultados"
                )
                return None
                
        except Exception as e:
            self.show_error(f"Error aplicando filtro: {e}")
            return None
    
    def bulk_operations(self, apps: List[AppConfig]):
        """Operaciones en lote para m√∫ltiples aplicaciones"""
        # Seleccionar aplicaciones
        app_choices = []
        for i, app in enumerate(apps):
            domain = getattr(app, 'domain', f'App {i+1}')
            app_type = getattr(app, 'app_type', 'unknown')
            status = getattr(app, 'status', 'unknown')
            
            status_icon = "üü¢" if status == "active" else "üî¥"
            display_text = f"{status_icon} {domain} ({app_type})"
            app_choices.append((str(i), display_text, False))
        
        code, selected_apps = self.d.checklist(
            "Selecciona las aplicaciones para operaci√≥n en lote:",
            choices=app_choices,
            height=min(20, len(app_choices) + 8),
            width=70,
            title="Seleccionar Aplicaciones"
        )
        
        if code != self.d.OK or not selected_apps:
            return
        
        # Seleccionar operaci√≥n
        operation_choices = [
            ("restart", "üîÑ Reiniciar Todas"),
            ("update", "üì• Actualizar Todas"),
            ("logs", "üìã Ver Logs de Todas"),
            ("ssl", "üîí Configurar SSL en Todas"),
            ("backup", "üíæ Backup de Todas"),
            ("status", "üìä Estado de Todas")
        ]
        
        code, operation = self.d.menu(
            f"Selecciona la operaci√≥n para {len(selected_apps)} aplicaciones:",
            choices=operation_choices,
            height=12,
            width=50,
            title="Operaci√≥n en Lote"
        )
        
        if code != self.d.OK:
            return
        
        # Ejecutar operaci√≥n en lote
        self.execute_bulk_operation(apps, selected_apps, operation)
    
    def execute_bulk_operation(self, apps: List[AppConfig], selected_indices: List[str], operation: str):
        """Ejecutar operaci√≥n en lote"""
        selected_apps = [apps[int(i)] for i in selected_indices]
        
        # Confirmar operaci√≥n
        app_names = [getattr(app, 'domain', 'N/A') for app in selected_apps]
        confirm_text = f"""
OPERACI√ìN EN LOTE
{'=' * 17}

Operaci√≥n: {operation.upper()}
Aplicaciones seleccionadas: {len(selected_apps)}

{chr(10).join(f'  ‚Ä¢ {name}' for name in app_names)}

¬øContinuar con la operaci√≥n en lote?
        """
        
        code = self.d.yesno(
            confirm_text,
            height=min(20, len(selected_apps) + 10),
            width=60,
            title="Confirmar Operaci√≥n en Lote"
        )
        
        if code != self.d.OK:
            return
        
        # Ejecutar operaci√≥n con progreso
        self.d.gauge_start(
            f"Ejecutando {operation} en {len(selected_apps)} aplicaciones...",
            height=10,
            width=65,
            title="Operaci√≥n en Lote"
        )
        
        try:
            total_apps = len(selected_apps)
            success_count = 0
            failed_apps = []
            
            for i, app in enumerate(selected_apps):
                domain = getattr(app, 'domain', 'N/A')
                progress = int((i / total_apps) * 100)
                
                self.d.gauge_update(progress, f"Procesando {domain}...")
                
                try:
                    if operation == "restart":
                        success = self.manager.restart_app(domain)
                    elif operation == "update":
                        success = self.manager.update_app(domain)
                    elif operation == "logs":
                        # Para logs, simplemente marcamos como exitoso
                        success = True
                    elif operation == "ssl":
                        # Configurar SSL (implementar seg√∫n la l√≥gica del manager)
                        success = True
                    elif operation == "backup":
                        # Crear backup (implementar seg√∫n la l√≥gica del manager)
                        success = True
                    elif operation == "status":
                        # Obtener estado (siempre exitoso)
                        success = True
                    else:
                        success = False
                    
                    if success:
                        success_count += 1
                    else:
                        failed_apps.append(domain)
                        
                except Exception as e:
                    failed_apps.append(f"{domain} (Error: {str(e)[:30]})")
                
                time.sleep(0.5)  # Pausa para mostrar progreso
            
            self.d.gauge_update(100, "Completando operaci√≥n...")
            time.sleep(1)
            self.d.gauge_stop()
            
            # Mostrar resultados
            result_text = f"""
RESULTADO DE OPERACI√ìN EN LOTE
{'=' * 30}

Operaci√≥n: {operation.upper()}
Total de aplicaciones: {total_apps}
Exitosas: {success_count}
Fallidas: {len(failed_apps)}

"""
            
            if failed_apps:
                result_text += "APLICACIONES FALLIDAS:\n"
                for app in failed_apps:
                    result_text += f"  ‚ùå {app}\n"
            
            if success_count > 0:
                result_text += f"\n‚úÖ {success_count} aplicaciones procesadas exitosamente"
            
            self.d.scrollbox(result_text, height=18, width=70, title="Resultado de Operaci√≥n")
            
        except Exception as e:
            self.d.gauge_stop()
            self.show_error(f"Error en operaci√≥n en lote: {e}")
    
    def show_app_management_menu(self, app: AppConfig, apps: List[AppConfig]):
        """Mostrar men√∫ de gesti√≥n para una aplicaci√≥n espec√≠fica"""
        domain = getattr(app, 'domain', 'N/A')
        
        while True:
            # Obtener estado actual
            try:
                status = self.manager.systemd_service.get_service_status(domain)
                connectivity = self.manager.app_service.test_connectivity(domain, getattr(app, 'port', 0))
                
                # Crear informaci√≥n de estado
                status_info = f"""
APLICACI√ìN: {domain}
{'=' * (len(domain) + 12)}

Estado del servicio: {status}
Conectividad: {'üü¢ Activo' if connectivity else 'üî¥ No responde'}
Tipo: {getattr(app, 'app_type', 'N/A')}
Puerto: {getattr(app, 'port', 'N/A')}
SSL: {'üîí Configurado' if getattr(app, 'ssl', False) else 'üîì No configurado'}
                """
                
                # Men√∫ de acciones
                choices = [
                    ("1", "ÔøΩ Ver Detalles Completos"),
                    ("2", "üîÑ Reiniciar Aplicaci√≥n"),
                    ("3", "ÔøΩ Actualizar Aplicaci√≥n"),
                    ("4", "ÔøΩ Ver Logs"),
                    ("5", "üîç Diagnosticar Problemas"),
                    ("6", "üîß Reparar Aplicaci√≥n"),
                    ("7", "üìÇ Abrir Directorio"),
                    ("8", "üóëÔ∏è Eliminar Aplicaci√≥n"),
                    ("9", "‚öôÔ∏è Configuraci√≥n Avanzada"),
                    ("0", "‚¨ÖÔ∏è Volver a Lista")
                ]
                
                code, tag = self.d.menu(
                    status_info + "\n\nSelecciona una acci√≥n:",
                    choices=choices,
                    height=25,
                    width=70,
                    title=f"Gesti√≥n de {domain}"
                )
                
                if code != self.d.OK or tag == "0":
                    break
                elif tag == "1":
                    self.show_app_details_enhanced(app)
                elif tag == "2":
                    self.restart_app_enhanced(app)
                elif tag == "3":
                    self.update_app_enhanced(app)
                elif tag == "4":
                    self.show_app_logs_enhanced(app)
                elif tag == "5":
                    self.diagnose_app(app)
                elif tag == "6":
                    self.repair_app(app)
                elif tag == "7":
                    self.open_app_directory(app)
                elif tag == "8":
                    if self.remove_app_enhanced(app):
                        break  # Salir si se elimina la aplicaci√≥n
                elif tag == "9":
                    self.show_app_advanced_config(app)
                    
            except Exception as e:
                self.show_error(f"Error obteniendo estado de aplicaci√≥n: {e}")
                break
    
    def show_apps_list(self, apps: List[AppConfig]):
        """Mostrar lista de aplicaciones en formato tabla mejorado"""
        if not apps:
            return
        
        # Crear tabla mejorada de aplicaciones
        table_text = "APLICACIONES DESPLEGADAS\n"
        table_text += "=" * 80 + "\n"
        table_text += f"{'DOMINIO':<25} {'TIPO':<12} {'PUERTO':<8} {'ESTADO':<12} {'SSL':<5} {'ACTUALIZADO':<15}\n"
        table_text += "-" * 80 + "\n"
        
        for app in apps:
            try:
                domain = getattr(app, 'domain', 'N/A')[:24]
                app_type = getattr(app, 'app_type', 'N/A')[:11]
                port = str(getattr(app, 'port', 'N/A'))[:7]
                status = getattr(app, 'status', 'unknown')[:11]
                ssl = "üîí" if getattr(app, 'ssl', False) else "üîì"
                updated = getattr(app, 'last_updated', 'N/A')[:14]
                
                table_text += f"{domain:<25} {app_type:<12} {port:<8} {status:<12} {ssl:<5} {updated:<15}\n"
            except Exception as e:
                table_text += f"{'ERROR':<25} {'ERROR':<12} {'ERROR':<8} {'ERROR':<12} {'‚ùå':<5} {'ERROR':<15}\n"
        
        table_text += "\n" + "=" * 80 + "\n"
        table_text += f"Total de aplicaciones: {len(apps)}\n"
        table_text += "üü¢ = Activo, üî¥ = Inactivo, üîí = SSL, üîì = Sin SSL"
        
        self.d.scrollbox(table_text, height=20, width=85, title="Lista de Aplicaciones")
    
    def show_app_details_enhanced(self, app: AppConfig):
        """Mostrar detalles mejorados de la aplicaci√≥n"""
        try:
            domain = getattr(app, 'domain', 'N/A')
            
            # Obtener informaci√≥n adicional
            status = self.manager.systemd_service.get_service_status(domain)
            connectivity = self.manager.app_service.test_connectivity(domain, getattr(app, 'port', 0))
            
            # Construir informaci√≥n detallada
            details = f"""
DETALLES COMPLETOS DE LA APLICACI√ìN
{'=' * 37}

INFORMACI√ìN B√ÅSICA:
  Dominio: {getattr(app, 'domain', 'N/A')}
  Tipo: {getattr(app, 'app_type', 'N/A')}
  Puerto: {getattr(app, 'port', 'N/A')}
  SSL: {'üîí Configurado' if getattr(app, 'ssl', False) else 'üîì No configurado'}

C√ìDIGO FUENTE:
  Repositorio: {getattr(app, 'source', 'N/A')}
  Rama: {getattr(app, 'branch', 'N/A')}
  
ESTADO ACTUAL:
  Servicio: {status}
  Conectividad: {'üü¢ Activo' if connectivity else 'üî¥ No responde'}
  
FECHAS:
  Creado: {getattr(app, 'created', 'N/A')}
  Actualizado: {getattr(app, 'last_updated', 'N/A')}

CONFIGURACI√ìN:
  Build Command: {getattr(app, 'build_command', 'Default')}
  Start Command: {getattr(app, 'start_command', 'Default')}
  
UBICACIONES:
  Directorio: /var/www/apps/{domain}
  Nginx Config: /etc/nginx/sites-available/{domain}
  SystemD Service: /etc/systemd/system/{domain}.service
  Logs: journalctl -u {domain}.service
            """
            
            # Mostrar con opci√≥n de navegaci√≥n
            choices = [
                ("logs", "üìã Ver Logs"),
                ("nginx", "üåê Ver Config Nginx"),
                ("systemd", "‚öôÔ∏è Ver Service SystemD"),
                ("dir", "üìÇ Abrir Directorio"),
                ("close", "‚úÖ Cerrar")
            ]
            
            code, tag = self.d.menu(
                details + "\n\nAcciones disponibles:",
                choices=choices,
                height=25,
                width=75,
                title=f"Detalles de {domain}"
            )
            
            if code == self.d.OK and tag == "logs":
                self.show_app_logs_enhanced(app)
            elif code == self.d.OK and tag == "nginx":
                self.show_nginx_config(app)
            elif code == self.d.OK and tag == "systemd":
                self.show_systemd_config(app)
            elif code == self.d.OK and tag == "dir":
                self.open_app_directory(app)
                
        except Exception as e:
            self.show_error(f"Error mostrando detalles: {e}")
    
    def restart_app_enhanced(self, app: AppConfig):
        """Reiniciar aplicaci√≥n con progreso mejorado"""
        domain = getattr(app, 'domain', 'N/A')
        
        # Confirmar reinicio
        code = self.d.yesno(
            f"¬øReiniciar la aplicaci√≥n '{domain}'?\n\n"
            "Esto detendr√° temporalmente el servicio y puede\n"
            "causar una breve interrupci√≥n del servicio.",
            height=10,
            width=55,
            title="Confirmar Reinicio"
        )
        
        if code == self.d.OK:
            # Mostrar progreso
            self.d.gauge_start(
                f"Reiniciando {domain}...",
                height=10,
                width=60,
                title="Reinicio en Progreso"
            )
            
            try:
                # Paso 1: Detener servicio
                self.d.gauge_update(25, "Deteniendo servicio...")
                time.sleep(1)
                
                # Paso 2: Esperar
                self.d.gauge_update(50, "Esperando...")
                time.sleep(1)
                
                # Paso 3: Iniciar servicio
                self.d.gauge_update(75, "Iniciando servicio...")
                result = self.manager.restart_app(domain)
                
                # Paso 4: Verificar
                self.d.gauge_update(100, "Verificando estado...")
                time.sleep(1)
                
                self.d.gauge_stop()
                
                # Mostrar resultado
                if result:
                    self.d.msgbox(
                        f"‚úÖ REINICIO EXITOSO\n\n"
                        f"La aplicaci√≥n '{domain}' ha sido reiniciada\n"
                        f"correctamente y est√° funcionando.\n\n"
                        f"URL: http{'s' if getattr(app, 'ssl', False) else ''}://{domain}",
                        height=12,
                        width=55,
                        title="Reinicio Completado"
                    )
                else:
                    self.d.msgbox(
                        f"‚ùå ERROR EN REINICIO\n\n"
                        f"No se pudo reiniciar la aplicaci√≥n '{domain}'.\n"
                        f"Revisa los logs para m√°s detalles.\n\n"
                        f"Comando para logs: journalctl -u {domain}.service",
                        height=12,
                        width=55,
                        title="Error en Reinicio"
                    )
                    
            except Exception as e:
                self.d.gauge_stop()
                self.show_error(f"Error durante el reinicio: {e}")
    
    def update_app_enhanced(self, app: AppConfig):
        """Actualizar aplicaci√≥n con progreso mejorado"""
        domain = getattr(app, 'domain', 'N/A')
        
        # Mostrar informaci√≥n de actualizaci√≥n
        update_info = f"""
ACTUALIZACI√ìN DE APLICACI√ìN
{'=' * 27}

Aplicaci√≥n: {domain}
Repositorio: {getattr(app, 'source', 'N/A')}
Rama: {getattr(app, 'branch', 'N/A')}

PROCESO DE ACTUALIZACI√ìN:
1. Backup autom√°tico de la aplicaci√≥n actual
2. Descarga del c√≥digo m√°s reciente
3. Instalaci√≥n/actualizaci√≥n de dependencias
4. Reconstrucci√≥n de la aplicaci√≥n
5. Reinicio del servicio
6. Verificaci√≥n del funcionamiento

¬øContinuar con la actualizaci√≥n?
        """
        
        code = self.d.yesno(
            update_info,
            height=18,
            width=65,
            title="Confirmar Actualizaci√≥n"
        )
        
        if code == self.d.OK:
            # Mostrar progreso detallado
            self.d.gauge_start(
                f"Actualizando {domain}...",
                height=10,
                width=65,
                title="Actualizaci√≥n en Progreso"
            )
            
            try:
                # Simular pasos de actualizaci√≥n
                steps = [
                    ("Creando backup...", 15),
                    ("Descargando c√≥digo...", 30),
                    ("Instalando dependencias...", 50),
                    ("Reconstruyendo aplicaci√≥n...", 70),
                    ("Reiniciando servicio...", 85),
                    ("Verificando funcionamiento...", 95)
                ]
                
                for step_text, percent in steps:
                    self.d.gauge_update(percent, step_text)
                    time.sleep(1)
                
                # Ejecutar actualizaci√≥n real
                self.d.gauge_update(98, "Finalizando actualizaci√≥n...")
                result = self.manager.update_app(domain)
                
                self.d.gauge_update(100, "Actualizaci√≥n completada")
                time.sleep(1)
                self.d.gauge_stop()
                
                # Mostrar resultado
                if result:
                    self.d.msgbox(
                        f"‚úÖ ACTUALIZACI√ìN EXITOSA\n\n"
                        f"La aplicaci√≥n '{domain}' ha sido actualizada\n"
                        f"correctamente con el c√≥digo m√°s reciente.\n\n"
                        f"URL: http{'s' if getattr(app, 'ssl', False) else ''}://{domain}",
                        height=12,
                        width=55,
                        title="Actualizaci√≥n Completada"
                    )
                else:
                    self.d.msgbox(
                        f"‚ùå ERROR EN ACTUALIZACI√ìN\n\n"
                        f"No se pudo actualizar la aplicaci√≥n '{domain}'.\n"
                        f"La aplicaci√≥n anterior deber√≠a seguir funcionando.\n\n"
                        f"Revisa los logs para m√°s detalles.",
                        height=12,
                        width=55,
                        title="Error en Actualizaci√≥n"
                    )
                    
            except Exception as e:
                self.d.gauge_stop()
                self.show_error(f"Error durante la actualizaci√≥n: {e}")
    
    def show_app_logs_enhanced(self, app: AppConfig):
        """Mostrar logs mejorados de la aplicaci√≥n"""
        domain = getattr(app, 'domain', 'N/A')
        
        # Opciones de logs
        choices = [
            ("recent", "üìã √öltimas 50 l√≠neas"),
            ("errors", "‚ùå Solo errores"),
            ("full", "üìú Log completo (√∫ltimas 200 l√≠neas)"),
            ("live", "üì° Ver en tiempo real (seguimiento)"),
            ("export", "üíæ Exportar logs a archivo")
        ]
        
        code, tag = self.d.menu(
            f"Selecciona el tipo de log para {domain}:",
            choices=choices,
            height=12,
            width=55,
            title="Opciones de Logs"
        )
        
        if code == self.d.OK:
            if tag == "recent":
                self.show_logs_content(domain, lines=50)
            elif tag == "errors":
                self.show_logs_content(domain, errors_only=True)
            elif tag == "full":
                self.show_logs_content(domain, lines=200)
            elif tag == "live":
                self.show_live_logs_info(domain)
            elif tag == "export":
                self.export_logs(domain)
    
    def show_logs_content(self, domain: str, lines: int = 50, errors_only: bool = False):
        """Mostrar contenido de logs limpio para GUI"""
        try:
            # Obtener logs del sistema
            if errors_only:
                cmd = f"journalctl -u {domain}.service -p err -n {lines} --no-pager"
            else:
                cmd = f"journalctl -u {domain}.service -n {lines} --no-pager"
            
            # Ejecutar comando y obtener logs
            result = subprocess.run(
                cmd.split(),
                capture_output=True,
                text=True,
                timeout=10
            )
            
            if result.returncode == 0 and result.stdout:
                # Limpiar logs para GUI
                clean_logs = self.format_log_for_gui(result.stdout)
                
                # Mostrar en scrollbox
                self.d.scrollbox(
                    clean_logs,
                    height=20,
                    width=80,
                    title=f"Logs de {domain} ({'Errores' if errors_only else f'√öltimas {lines} l√≠neas'})"
                )
            else:
                self.d.msgbox(
                    "No hay logs disponibles para mostrar o el servicio no existe.",
                    height=8,
                    width=50,
                    title="Sin Logs"
                )
            
        except subprocess.TimeoutExpired:
            self.show_error("Timeout al obtener logs. El comando tard√≥ demasiado.")
        except Exception as e:
            self.show_error(f"Error obteniendo logs: {e}")
    
    def show_live_logs_info(self, domain: str):
        """Mostrar informaci√≥n para logs en tiempo real"""
        info = f"""
LOGS EN TIEMPO REAL
{'=' * 19}

Para ver los logs en tiempo real de {domain}, ejecuta
este comando en una terminal:

journalctl -u {domain}.service -f

Comandos √∫tiles:
‚Ä¢ Ver √∫ltimas 100 l√≠neas: journalctl -u {domain}.service -n 100
‚Ä¢ Ver solo errores: journalctl -u {domain}.service -p err
‚Ä¢ Ver logs desde hoy: journalctl -u {domain}.service --since today
‚Ä¢ Ver logs con timestamps: journalctl -u {domain}.service -o short-iso

Presiona Ctrl+C para detener el seguimiento.
        """
        
        self.d.msgbox(info, height=18, width=65, title="Logs en Tiempo Real")
    
    def export_logs(self, domain: str):
        """Exportar logs a archivo"""
        try:
            # Obtener logs
            logs = self.manager.cmd.run(f"journalctl -u {domain}.service -n 500 --no-pager", check=False)
            
            if logs:
                # Limpiar logs antes de exportar
                clean_logs = self.clean_ansi_sequences(logs)
                
                # Crear archivo de logs
                log_file = f"/tmp/{domain}_logs_export.txt"
                with open(log_file, 'w') as f:
                    f.write(f"Logs de {domain}\n")
                    f.write(f"Exportado: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
                    f.write("=" * 50 + "\n\n")
                    f.write(clean_logs)
                
                self.d.msgbox(
                    f"‚úÖ Logs exportados exitosamente\n\n"
                    f"Archivo: {log_file}\n\n"
                    f"Para copiar el archivo:\n"
                    f"cp {log_file} /home/usuario/\n\n"
                    f"Para ver el archivo:\n"
                    f"less {log_file}",
                    height=14,
                    width=55,
                    title="Exportaci√≥n Completada"
                )
            else:
                self.d.msgbox(
                    "‚ùå No se encontraron logs para exportar",
                    height=8,
                    width=45,
                    title="Error en Exportaci√≥n"
                )
                
        except Exception as e:
            self.show_error(f"Error exportando logs: {e}")
    
    def diagnose_app(self, app: AppConfig):
        """Diagnosticar problemas de la aplicaci√≥n"""
        domain = getattr(app, 'domain', 'N/A')
        
        self.d.infobox(
            f"Diagnosticando {domain}...\n\n"
            "Verificando servicios, configuraci√≥n y conectividad.",
            height=8,
            width=55,
            title="Diagn√≥stico"
        )
        
        time.sleep(2)
        
        try:
            # Obtener informaci√≥n de diagn√≥stico
            service_status = self.manager.systemd_service.get_service_status(domain)
            connectivity = self.manager.app_service.test_connectivity(domain, getattr(app, 'port', 0))
            nginx_config_ok = self.manager.nginx_service.test_config()
            
            # Verificar archivos importantes
            app_dir = f"/var/www/apps/{domain}"
            nginx_config = f"/etc/nginx/sites-available/{domain}"
            systemd_service = f"/etc/systemd/system/{domain}.service"
            
            issues = []
            recommendations = []
            
            # Analizar problemas
            if service_status != "active":
                issues.append(f"‚ùå Servicio no activo: {service_status}")
                recommendations.append(f"‚Ä¢ Reiniciar servicio: webapp-manager restart --domain {domain}")
            
            if not connectivity:
                issues.append(f"‚ùå Aplicaci√≥n no responde en puerto {getattr(app, 'port', 'N/A')}")
                recommendations.append("‚Ä¢ Verificar logs de la aplicaci√≥n")
                recommendations.append("‚Ä¢ Verificar que el puerto est√© libre")
            
            if not nginx_config_ok:
                issues.append("‚ùå Configuraci√≥n nginx tiene errores")
                recommendations.append("‚Ä¢ Revisar configuraci√≥n nginx: sudo nginx -t")
            
            # Crear reporte
            if issues:
                diagnosis = f"""
DIAGN√ìSTICO DE {domain.upper()}
{'=' * (len(domain) + 15)}

PROBLEMAS ENCONTRADOS:
{''.join(f'  {issue}' + chr(10) for issue in issues)}

RECOMENDACIONES:
{''.join(f'  {rec}' + chr(10) for rec in recommendations)}

INFORMACI√ìN ADICIONAL:
  ‚Ä¢ Directorio: {app_dir}
  ‚Ä¢ Config nginx: {nginx_config}
  ‚Ä¢ Servicio systemd: {systemd_service}
  ‚Ä¢ Logs: journalctl -u {domain}.service
                """
            else:
                diagnosis = f"""
DIAGN√ìSTICO DE {domain.upper()}
{'=' * (len(domain) + 15)}

‚úÖ APLICACI√ìN FUNCIONANDO CORRECTAMENTE

Estado del servicio: {service_status}
Conectividad: ‚úÖ Activo
Configuraci√≥n nginx: ‚úÖ V√°lida

No se encontraron problemas.
                """
            
            self.d.msgbox(diagnosis, height=20, width=70, title="Resultado del Diagn√≥stico")
            
        except Exception as e:
            self.show_error(f"Error durante el diagn√≥stico: {e}")
    
    def repair_app(self, app: AppConfig):
        """Reparar aplicaci√≥n con problemas"""
        domain = getattr(app, 'domain', 'N/A')
        
        # Confirmar reparaci√≥n
        repair_info = f"""
REPARACI√ìN DE APLICACI√ìN
{'=' * 24}

Aplicaci√≥n: {domain}
Tipo: {getattr(app, 'app_type', 'N/A')}

PROCESO DE REPARACI√ìN:
1. Detener servicio
2. Verificar y reparar dependencias
3. Reconstruir aplicaci√≥n si es necesario
4. Recrear servicio systemd
5. Reiniciar y verificar funcionamiento

¬øContinuar con la reparaci√≥n?
        """
        
        code = self.d.yesno(
            repair_info,
            height=16,
            width=55,
            title="Confirmar Reparaci√≥n"
        )
        
        if code == self.d.OK:
            # Mostrar progreso
            self.d.gauge_start(
                f"Reparando {domain}...",
                height=10,
                width=60,
                title="Reparaci√≥n en Progreso"
            )
            
            try:
                # Simular pasos de reparaci√≥n
                steps = [
                    ("Deteniendo servicio...", 20),
                    ("Verificando dependencias...", 40),
                    ("Reconstruyendo aplicaci√≥n...", 60),
                    ("Recreando servicio...", 80),
                    ("Reiniciando y verificando...", 95)
                ]
                
                for step_text, percent in steps:
                    self.d.gauge_update(percent, step_text)
                    time.sleep(1)
                
                # Ejecutar reparaci√≥n real
                self.d.gauge_update(98, "Finalizando reparaci√≥n...")
                result = self.manager.repair_app(domain)
                
                self.d.gauge_update(100, "Reparaci√≥n completada")
                time.sleep(1)
                self.d.gauge_stop()
                
                # Mostrar resultado
                if result:
                    self.d.msgbox(
                        f"‚úÖ REPARACI√ìN EXITOSA\n\n"
                        f"La aplicaci√≥n '{domain}' ha sido reparada\n"
                        f"correctamente y est√° funcionando.\n\n"
                        f"URL: http{'s' if getattr(app, 'ssl', False) else ''}://{domain}",
                        height=12,
                        width=55,
                        title="Reparaci√≥n Completada"
                    )
                else:
                    self.d.msgbox(
                        f"‚ùå ERROR EN REPARACI√ìN\n\n"
                        f"No se pudo reparar completamente la aplicaci√≥n '{domain}'.\n"
                        f"Puede ser necesaria intervenci√≥n manual.\n\n"
                        f"Revisa los logs para m√°s detalles.",
                        height=12,
                        width=55,
                        title="Error en Reparaci√≥n"
                    )
                    
            except Exception as e:
                self.d.gauge_stop()
                self.show_error(f"Error durante la reparaci√≥n: {e}")
    
    def open_app_directory(self, app: AppConfig):
        """Abrir directorio de la aplicaci√≥n"""
        domain = getattr(app, 'domain', 'N/A')
        app_dir = f"/var/www/apps/{domain}"
        
        directory_info = f"""
DIRECTORIO DE LA APLICACI√ìN
{'=' * 27}

Aplicaci√≥n: {domain}
Directorio: {app_dir}

COMANDOS √öTILES:
‚Ä¢ Navegar al directorio:
  cd {app_dir}

‚Ä¢ Listar archivos:
  ls -la {app_dir}

‚Ä¢ Ver estructura:
  tree {app_dir}

‚Ä¢ Editar archivos:
  nano {app_dir}/archivo.txt

‚Ä¢ Ver espacio usado:
  du -sh {app_dir}

‚Ä¢ Cambiar permisos:
  sudo chown -R www-data:www-data {app_dir}
        """
        
        self.d.msgbox(directory_info, height=20, width=65, title="Directorio de Aplicaci√≥n")
    
    def remove_app_enhanced(self, app: AppConfig):
        """Eliminar aplicaci√≥n con confirmaci√≥n mejorada"""
        domain = getattr(app, 'domain', 'N/A')
        
        # Primera confirmaci√≥n
        warning_info = f"""
‚ö†Ô∏è  ELIMINAR APLICACI√ìN  ‚ö†Ô∏è
{'=' * 26}

Aplicaci√≥n: {domain}
Tipo: {getattr(app, 'app_type', 'N/A')}
Puerto: {getattr(app, 'port', 'N/A')}

ESTO ELIMINAR√Å:
‚Ä¢ C√≥digo fuente de la aplicaci√≥n
‚Ä¢ Configuraci√≥n nginx
‚Ä¢ Servicio systemd
‚Ä¢ Certificados SSL (si existen)

BACKUP AUTOM√ÅTICO:
‚úÖ Se crear√° backup antes de eliminar

¬øContinuar con la eliminaci√≥n?
        """
        
        code = self.d.yesno(
            warning_info,
            height=18,
            width=65,
            title="‚ö†Ô∏è CONFIRMAR ELIMINACI√ìN"
        )
        
        if code == self.d.OK:
            # Segunda confirmaci√≥n con entrada de texto
            code, confirmation = self.d.inputbox(
                f"Para confirmar la eliminaci√≥n, escribe el nombre\n"
                f"de la aplicaci√≥n exactamente como aparece:\n\n"
                f"Nombre requerido: {domain}",
                height=12,
                width=55,
                title="Confirmaci√≥n Final"
            )
            
            if code == self.d.OK and confirmation == domain:
                # Mostrar progreso
                self.d.gauge_start(
                    f"Eliminando {domain}...",
                    height=10,
                    width=60,
                    title="Eliminaci√≥n en Progreso"
                )
                
                try:
                    # Simular pasos de eliminaci√≥n
                    steps = [
                        ("Creando backup...", 20),
                        ("Deteniendo servicio...", 40),
                        ("Removiendo configuraci√≥n...", 60),
                        ("Eliminando archivos...", 80),
                        ("Limpiando sistema...", 95)
                    ]
                    
                    for step_text, percent in steps:
                        self.d.gauge_update(percent, step_text)
                        time.sleep(1)
                    
                    # Ejecutar eliminaci√≥n real
                    self.d.gauge_update(98, "Finalizando eliminaci√≥n...")
                    result = self.manager.remove_app(domain)
                    
                    self.d.gauge_update(100, "Eliminaci√≥n completada")
                    time.sleep(1)
                    self.d.gauge_stop()
                    
                    # Mostrar resultado
                    if result:
                        self.d.msgbox(
                            f"‚úÖ ELIMINACI√ìN EXITOSA\n\n"
                            f"La aplicaci√≥n '{domain}' ha sido eliminada\n"
                            f"completamente del sistema.\n\n"
                            f"Se ha creado un backup antes de la eliminaci√≥n.",
                            height=12,
                            width=55,
                            title="Eliminaci√≥n Completada"
                        )
                        return True  # Indica que se elimin√≥ la aplicaci√≥n
                    else:
                        self.d.msgbox(
                            f"‚ùå ERROR EN ELIMINACI√ìN\n\n"
                            f"No se pudo eliminar completamente la aplicaci√≥n '{domain}'.\n"
                            f"Puede ser necesaria intervenci√≥n manual.\n\n"
                            f"Revisa los logs para m√°s detalles.",
                            height=12,
                            width=55,
                            title="Error en Eliminaci√≥n"
                        )
                        
                except Exception as e:
                    self.d.gauge_stop()
                    self.show_error(f"Error durante la eliminaci√≥n: {e}")
                    
            elif code == self.d.OK:
                self.d.msgbox(
                    "‚ùå ELIMINACI√ìN CANCELADA\n\n"
                    "El nombre ingresado no coincide.\n"
                    "La aplicaci√≥n no ha sido eliminada.",
                    height=10,
                    width=50,
                    title="Cancelado"
                )
        
        return False  # No se elimin√≥ la aplicaci√≥n
    
    def show_app_advanced_config(self, app: AppConfig):
        """Mostrar configuraci√≥n avanzada de la aplicaci√≥n"""
        domain = getattr(app, 'domain', 'N/A')
        
        config_info = f"""
CONFIGURACI√ìN AVANZADA
{'=' * 22}

Aplicaci√≥n: {domain}

ARCHIVOS DE CONFIGURACI√ìN:
‚Ä¢ Nginx: /etc/nginx/sites-available/{domain}
‚Ä¢ SystemD: /etc/systemd/system/{domain}.service
‚Ä¢ Variables de entorno: {'/var/www/apps/' + domain}/.env

COMANDOS AVANZADOS:
‚Ä¢ Recargar nginx: sudo nginx -s reload
‚Ä¢ Reiniciar systemd: sudo systemctl daemon-reload
‚Ä¢ Ver estado del servicio: systemctl status {domain}.service
‚Ä¢ Editar servicio: sudo systemctl edit {domain}.service

SSL/CERTIFICADOS:
‚Ä¢ Renovar SSL: sudo certbot renew
‚Ä¢ Verificar SSL: sudo certbot certificates
‚Ä¢ Test SSL: curl -I https://{domain}

LOGS AVANZADOS:
‚Ä¢ Logs nginx: sudo tail -f /var/log/nginx/access.log
‚Ä¢ Logs error nginx: sudo tail -f /var/log/nginx/error.log
‚Ä¢ Logs aplicaci√≥n: journalctl -u {domain}.service -f

PERFORMANCE:
‚Ä¢ Monitorear recursos: htop
‚Ä¢ Conexiones activas: netstat -an | grep :{getattr(app, 'port', 'N/A')}
        """
        
        self.d.msgbox(config_info, height=22, width=75, title="Configuraci√≥n Avanzada")
    
    def show_nginx_config(self, app: AppConfig):
        """Mostrar configuraci√≥n nginx"""
        domain = getattr(app, 'domain', 'N/A')
        
        try:
            # Leer configuraci√≥n nginx
            nginx_config_file = f"/etc/nginx/sites-available/{domain}"
            config_content = self.manager.cmd.run(f"cat {nginx_config_file}", check=False)
            
            if config_content:
                self.d.scrollbox(
                    config_content,
                    height=20,
                    width=80,
                    title=f"Configuraci√≥n Nginx - {domain}"
                )
            else:
                self.d.msgbox(
                    "‚ùå No se pudo leer la configuraci√≥n nginx\n"
                    f"Archivo: {nginx_config_file}",
                    height=8,
                    width=50,
                    title="Error"
                )
                
        except Exception as e:
            self.show_error(f"Error leyendo configuraci√≥n nginx: {e}")
    
    def show_systemd_config(self, app: AppConfig):
        """Mostrar configuraci√≥n systemd"""
        domain = getattr(app, 'domain', 'N/A')
        
        try:
            # Leer configuraci√≥n systemd
            systemd_config_file = f"/etc/systemd/system/{domain}.service"
            config_content = self.manager.cmd.run(f"cat {systemd_config_file}", check=False)
            
            if config_content:
                self.d.scrollbox(
                    config_content,
                    height=20,
                    width=80,
                    title=f"Configuraci√≥n SystemD - {domain}"
                )
            else:
                self.d.msgbox(
                    "‚ùå No se pudo leer la configuraci√≥n systemd\n"
                    f"Archivo: {systemd_config_file}",
                    height=8,
                    width=50,
                    title="Error"
                )
                
        except Exception as e:
            self.show_error(f"Error leyendo configuraci√≥n systemd: {e}")
    
    def show_deploy_menu(self):
        """Mostrar men√∫ de despliegue simplificado"""
        while True:
            choices = [
                ("nextjs", "üì± Next.js Application"),
                ("fastapi", "üêç FastAPI Application"),
                ("nodejs", "üü¢ Node.js Application"),
                ("static", "üìÑ Static Website"),
                ("back", "‚¨ÖÔ∏è Volver al men√∫ principal")
            ]
            
            code, tag = self.d.menu(
                "Selecciona el tipo de aplicaci√≥n para desplegar:",
                choices=choices,
                height=12,
                width=60,
                title="Despliegue de Aplicaci√≥n"
            )
            
            if code != self.d.OK or tag == "back":
                break
            else:
                self.deploy_application_simple(tag)
    
    def deploy_application_simple(self, app_type: str):
        """Desplegar aplicaci√≥n de forma simplificada"""
        try:
            # Solicitar informaci√≥n b√°sica
            code, domain = self.d.inputbox(
                "Ingresa el dominio de la aplicaci√≥n:",
                height=10,
                width=60,
                title="Dominio de la Aplicaci√≥n"
            )
            if code != self.d.OK or not domain:
                return
            
            # Puerto con sugerencias
            port_suggestions = {
                "nextjs": "3000",
                "fastapi": "8000", 
                "nodejs": "5000",
                "static": "8080"
            }
            
            suggested_port = port_suggestions.get(app_type, "3000")
            
            code, port_str = self.d.inputbox(
                f"Puerto para la aplicaci√≥n {app_type.upper()}:",
                height=10,
                width=50,
                title="Puerto de la Aplicaci√≥n",
                init=suggested_port
            )
            if code != self.d.OK or not port_str:
                return
            
            try:
                port = int(port_str)
            except ValueError:
                self.show_error("Puerto inv√°lido. Debe ser un n√∫mero.")
                return
            
            # Fuente del c√≥digo
            code, source = self.d.inputbox(
                "Ruta o URL del c√≥digo fuente:",
                height=10,
                width=65,
                title="C√≥digo Fuente"
            )
            if code != self.d.OK or not source:
                return
            
            # Confirmaci√≥n SSL
            ssl = self.d.yesno(
                "¬øConfigurar SSL/HTTPS autom√°ticamente?",
                height=8,
                width=50,
                title="Configuraci√≥n SSL"
            ) == self.d.OK
            
            # Mostrar resumen y confirmar
            confirm_text = f"""
RESUMEN DEL DESPLIEGUE
{'=' * 21}

Dominio: {domain}
Tipo: {app_type.upper()}
Puerto: {port}
Fuente: {source}
SSL: {'‚úÖ S√≠' if ssl else '‚ùå No'}

¬øContinuar con el despliegue?
            """
            
            code = self.d.yesno(
                confirm_text,
                height=14,
                width=60,
                title="Confirmar Despliegue"
            )
            
            if code == self.d.OK:
                self.deploy_with_progress_simple(domain, port, app_type, source, ssl)
            
        except Exception as e:
            self.show_error(f"Error en el despliegue: {e}")
    
    def deploy_with_progress_simple(self, domain: str, port: int, app_type: str, 
                                   source: str, ssl: bool):
        """Desplegar con progreso simple"""
        try:
            self.d.gauge_start(
                f"Desplegando {domain}...",
                height=10,
                width=60,
                title="Desplegando Aplicaci√≥n"
            )
            
            # Pasos b√°sicos del despliegue
            steps = [
                ("Preparando entorno...", 20),
                ("Descargando c√≥digo...", 40),
                ("Instalando dependencias...", 60),
                ("Configurando servicios...", 80),
                ("Verificando funcionamiento...", 95)
            ]
            
            for step_text, percent in steps:
                self.d.gauge_update(percent, step_text)
                time.sleep(1)
            
            # Ejecutar despliegue real
            result = self.manager.add_app(
                domain=domain,
                port=port,
                app_type=app_type,
                source_path=source,
                ssl=ssl
            )
            
            self.d.gauge_update(100, "Despliegue completado")
            time.sleep(1)
            self.d.gauge_stop()
            
            # Mostrar resultado
            if result:
                self.d.msgbox(
                    f"‚úÖ DESPLIEGUE EXITOSO\n\n"
                    f"Aplicaci√≥n: {domain}\n"
                    f"URL: http{'s' if ssl else ''}://{domain}\n"
                    f"Estado: Activo",
                    height=12,
                    width=50,
                    title="Despliegue Completado"
                )
            else:
                self.d.msgbox(
                    f"‚ùå ERROR EN DESPLIEGUE\n\n"
                    f"No se pudo desplegar la aplicaci√≥n.\n"
                    f"Revisa los logs para m√°s detalles.",
                    height=10,
                    width=50,
                    title="Error en Despliegue"
                )
                
        except Exception as e:
            self.d.gauge_stop()
            self.show_error(f"Error durante el despliegue: {e}")

    def show_source_code(self, domain: str):
        """Mostrar c√≥digo fuente de la aplicaci√≥n"""
        try:
            # Obtener informaci√≥n de la aplicaci√≥n
            app = self.manager.get_app_info(domain)
            if not app:
                self.show_error(f"No se encontr√≥ informaci√≥n de la aplicaci√≥n {domain}")
                return
            
            # Mostrar c√≥digo fuente
            code, source = self.d.inputbox(
                f"Mostrar c√≥digo fuente de {domain}\n\n"
                f"Directorio: {app.get('directory', 'N/A')}\n"
                f"Tipo: {app.get('type', 'N/A')}\n\n"
                f"Ingrese el archivo a mostrar (relativo al directorio de la app):",
                height=12,
                width=65,
                title="C√≥digo Fuente"
            )
            if code != self.d.OK or not source:
                return
            
            # Paso 4: Rama con radiolist
            branch_choices = [
                ("main", "main (recomendado)", True),
                ("master", "master", False),
                ("develop", "develop", False),
                ("custom", "Rama personalizada", False)
            ]
            
            code, branch = self.d.radiolist(
                "Selecciona la rama del repositorio:",
                choices=branch_choices,
                height=12,
                width=60,
                title="Rama del Repositorio"
            )
            
            if code != self.d.OK:
                return
            
            if branch == "custom":
                code, branch = self.d.inputbox(
                    "Ingresa el nombre de la rama:",
                    height=10,
                    width=50,
                    title="Rama Personalizada"
                )
                if code != self.d.OK or not branch:
                    branch = "main"
            
            # Paso 5: Configuraci√≥n SSL con checklist
            ssl_options = [
                ("ssl", "Habilitar SSL/HTTPS", True),
                ("redirect", "Redirecci√≥n autom√°tica HTTP ‚Üí HTTPS", True),
                ("hsts", "Strict Transport Security", False)
            ]
            
            code, ssl_features = self.d.checklist(
                "Selecciona las caracter√≠sticas de SSL:",
                choices=ssl_options,
                height=12,
                width=60,
                title="Configuraci√≥n SSL"
            )
            
            ssl = "ssl" in ssl_features if code == self.d.OK else True
            
            # Paso 6: Configuraci√≥n avanzada (opcional)
            code = self.d.yesno(
                "¬øConfigurar opciones avanzadas?\n\n"
                "‚Ä¢ Comandos de construcci√≥n personalizados\n"
                "‚Ä¢ Variables de entorno\n"
                "‚Ä¢ Configuraci√≥n de cache",
                height=10,
                width=55,
                title="Configuraci√≥n Avanzada"
            )
            
            build_command = ""
            start_command = ""
            env_vars = None
            
            if code == self.d.OK:
                # Comandos personalizados
                build_commands = {
                    "nextjs": "npm run build",
                    "fastapi": "pip install -r requirements.txt",
                    "nodejs": "npm install",
                    "static": "# No build command needed"
                }
                
                code, build_command = self.d.inputbox(
                    "Comando de construcci√≥n:",
                    height=10,
                    width=60,
                    title="Comando de Build",
                    init=build_commands.get(app_type, "")
                )
                
                if code == self.d.OK:
                    start_commands = {
                        "nextjs": "npm start",
                        "fastapi": "uvicorn main:app --host 0.0.0.0 --port " + str(port),
                        "nodejs": "node server.js",
                        "static": "# Static files"
                    }
                    
                    code, start_command = self.d.inputbox(
                        "Comando de inicio:",
                        height=10,
                        width=60,
                        title="Comando de Start",
                        init=start_commands.get(app_type, "")
                    )
            
            # Paso 7: Confirmaci√≥n con scroll
            confirm_text = f"""
CONFIRMACI√ìN DE DESPLIEGUE
{'=' * 26}

INFORMACI√ìN B√ÅSICA:
  Dominio: {domain}
  Puerto: {port}
  Tipo: {app_type.upper()}
  
C√ìDIGO FUENTE:
  Fuente: {source}
  Rama: {branch}
  
CONFIGURACI√ìN:
  SSL: {'‚úÖ Habilitado' if ssl else '‚ùå Deshabilitado'}
  Build Command: {build_command or 'Por defecto'}
  Start Command: {start_command or 'Por defecto'}
  
URLS FINALES:
  HTTP: http://{domain}
  {'HTTPS: https://' + domain if ssl else 'HTTPS: No configurado'}

PROCESO DE DESPLIEGUE:
1. Validar configuraci√≥n
2. Preparar entorno
3. Descargar c√≥digo fuente
4. Instalar dependencias
5. Construir aplicaci√≥n
6. Configurar nginx
7. Crear servicio systemd
8. {'Configurar SSL' if ssl else 'Configurar HTTP'}
9. Verificar funcionamiento

TIEMPO ESTIMADO: 3-5 minutos

¬øContinuar con el despliegue?
            """
            
            code = self.d.yesno(
                confirm_text,
                height=22,
                width=70,
                title="Confirmar Despliegue"
            )
            
            if code == self.d.OK:
                self.deploy_with_progress(domain, port, app_type, source, branch, ssl, 
                                        build_command, start_command, env_vars)
            
        except Exception as e:
            self.show_error(f"Error en el asistente: {e}")
    
    def deploy_with_progress(self, domain: str, port: int, app_type: str, 
                           source: str, branch: str, ssl: bool, 
                           build_command: str = "", start_command: str = "",
                           env_vars: dict = None):
        """Desplegar aplicaci√≥n con indicador de progreso mejorado"""
        try:
            # Crear archivo temporal para mostrar progreso
            with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.txt') as f:
                progress_file = f.name
            
            # Mostrar progreso inicial con informaci√≥n detallada
            self.d.gauge_start(
                f"Iniciando despliegue de {domain}...\n"
                f"Tipo: {app_type.upper()}",
                height=12,
                width=70,
                title="Desplegando Aplicaci√≥n"
            )
            
            # Pasos detallados del despliegue
            steps = [
                ("Validando configuraci√≥n y prerrequisitos...", 8),
                ("Preparando entorno de despliegue...", 15),
                ("Descargando c√≥digo fuente...", 25),
                ("Instalando dependencias del sistema...", 35),
                ("Construyendo aplicaci√≥n...", 50),
                ("Configurando servidor nginx...", 65),
                ("Creando servicio systemd...", 75),
                ("Configurando SSL y certificados...", 85),
                ("Iniciando servicios...", 92),
                ("Verificando funcionamiento...", 98)
            ]
            
            for step_text, percent in steps:
                self.d.gauge_update(percent, step_text)
                time.sleep(1.2)  # Tiempo m√°s realista
            
            # Ejecutar despliegue real
            self.d.gauge_update(99, "Finalizando despliegue...")
            
            result = self.manager.add_app(
                domain=domain,
                port=port,
                app_type=app_type,
                source_path=source,
                branch=branch,
                ssl=ssl,
                build_command=build_command,
                start_command=start_command,
                env_vars=env_vars
            )
            
            # Finalizar progreso
            self.d.gauge_update(100, "Despliegue completado exitosamente")
            time.sleep(1)
            self.d.gauge_stop()
            
            # Mostrar resultado detallado
            if result:
                success_text = f"""
DESPLIEGUE EXITOSO
{'=' * 18}

‚úÖ Aplicaci√≥n desplegada correctamente

INFORMACI√ìN DE LA APLICACI√ìN:
  Dominio: {domain}
  Puerto: {port}
  Tipo: {app_type.upper()}
  
URLS DISPONIBLES:
  HTTP: http://{domain}
  {'HTTPS: https://' + domain if ssl else 'HTTPS: No configurado'}

SERVICIOS CONFIGURADOS:
  ‚úÖ Servidor nginx configurado
  ‚úÖ Servicio systemd creado
  ‚úÖ {'Certificado SSL instalado' if ssl else 'HTTP configurado'}
  ‚úÖ Aplicaci√≥n iniciada y verificada

PR√ìXIMOS PASOS:
  ‚Ä¢ Visita tu aplicaci√≥n en el navegador
  ‚Ä¢ Configura el DNS para apuntar a este servidor
  ‚Ä¢ {'Verifica la configuraci√≥n SSL' if ssl else 'Considera habilitar SSL'}

COMANDOS √öTILES:
  ‚Ä¢ Ver logs: webapp-manager logs --domain {domain}
  ‚Ä¢ Reiniciar: webapp-manager restart --domain {domain}
  ‚Ä¢ Estado: webapp-manager status --domain {domain}
                """
                
                # Mostrar en scrollbox para mejor legibilidad
                self.d.scrollbox(success_text, height=22, width=75, title="Despliegue Completado")
                
                # Pregunta si quiere abrir en navegador
                code = self.d.yesno(
                    f"¬øAbrir {domain} en el navegador del sistema?",
                    height=8,
                    width=50,
                    title="Abrir Aplicaci√≥n"
                )
                
                if code == self.d.OK:
                    self.d.msgbox(
                        f"Para abrir la aplicaci√≥n, visita:\n\n"
                        f"{'https' if ssl else 'http'}://{domain}\n\n"
                        "En tu navegador web favorito.",
                        height=10,
                        width=60,
                        title="URL de la Aplicaci√≥n"
                    )
                
            else:
                error_text = f"""
ERROR EN EL DESPLIEGUE
{'=' * 21}

‚ùå No se pudo desplegar la aplicaci√≥n

POSIBLES CAUSAS:
  ‚Ä¢ Puerto {port} ya est√° en uso
  ‚Ä¢ Problemas de conectividad con el repositorio
  ‚Ä¢ Dependencias faltantes en el sistema
  ‚Ä¢ Errores en el c√≥digo fuente
  ‚Ä¢ Configuraci√≥n nginx incorrecta

SOLUCIONES SUGERIDAS:
  1. Verifica que el puerto est√© libre:
     netstat -tlnp | grep {port}
  
  2. Comprueba los logs del sistema:
     webapp-manager logs --domain {domain}
  
  3. Verifica la configuraci√≥n nginx:
     sudo nginx -t
  
  4. Revisa los logs detallados:
     journalctl -u webapp-manager -f

OBTENER AYUDA:
  ‚Ä¢ Ejecuta diagn√≥stico: webapp-manager diagnose
  ‚Ä¢ Revisa la documentaci√≥n
  ‚Ä¢ Verifica los prerrequisitos del sistema
                """
                
                self.d.scrollbox(error_text, height=22, width=75, title="Error en Despliegue")
                
                # Ofrecer opciones de soluci√≥n
                solution_choices = [
                    ("retry", "üîÑ Reintentar despliegue"),
                    ("diagnose", "üîç Ejecutar diagn√≥stico"),
                    ("logs", "üìã Ver logs detallados"),
                    ("support", "‚ùì Obtener ayuda"),
                    ("close", "‚úÖ Cerrar")
                ]
                
                code, tag = self.d.menu(
                    "¬øQu√© deseas hacer?",
                    choices=solution_choices,
                    height=12,
                    width=60,
                    title="Opciones de Soluci√≥n"
                )
                
                if code == self.d.OK:
                    if tag == "retry":
                        self.deploy_with_progress(domain, port, app_type, source, branch, ssl, 
                                                build_command, start_command, env_vars)
                    elif tag == "diagnose":
                        self.run_system_diagnosis_enhanced()
                    elif tag == "logs":
                        self.show_system_logs()
                    elif tag == "support":
                        self.show_support_info()
            
        except Exception as e:
            self.d.gauge_stop()
            self.show_error(f"Error durante el despliegue: {e}")
        finally:
            # Limpiar archivo temporal
            try:
                os.unlink(progress_file)
            except:
                pass
    
    def show_system_logs(self):
        """Mostrar logs del sistema"""
        try:
            # Obtener logs recientes
            logs = self.manager.cmd.run("journalctl -u webapp-manager -n 100 --no-pager", check=False)
            
            if logs:
                # Limpiar logs para GUI
                clean_logs = self.format_log_for_gui(logs)
                
                self.d.scrollbox(
                    f"LOGS DEL SISTEMA\n{'=' * 16}\n\n{clean_logs}",
                    height=22,
                    width=80,
                    title="Logs del Sistema"
                )
            else:
                self.d.msgbox(
                    "No se encontraron logs del sistema\n\n"
                    "Ejecuta: journalctl -u webapp-manager -f\n"
                    "para ver logs en tiempo real.",
                    height=10,
                    width=50,
                    title="Sin Logs"
                )
        except Exception as e:
            self.show_error(f"Error obteniendo logs: {e}")
    
    def show_support_info(self):
        """Mostrar informaci√≥n de soporte"""
        support_text = f"""
SOPORTE Y AYUDA
{'=' * 15}

DOCUMENTACI√ìN:
  ‚Ä¢ Manual de usuario: /usr/share/doc/webapp-manager/
  ‚Ä¢ Gu√≠a de soluci√≥n de problemas
  ‚Ä¢ Ejemplos de configuraci√≥n

COMANDOS DE DIAGN√ìSTICO:
  ‚Ä¢ webapp-manager diagnose
  ‚Ä¢ webapp-manager status
  ‚Ä¢ webapp-manager list --detailed
  ‚Ä¢ sudo nginx -t
  ‚Ä¢ systemctl status nginx

LOGS IMPORTANTES:
  ‚Ä¢ Sistema: journalctl -u webapp-manager
  ‚Ä¢ Nginx: tail -f /var/log/nginx/error.log
  ‚Ä¢ Aplicaciones: journalctl -u <dominio>.service

CONFIGURACI√ìN:
  ‚Ä¢ Archivos: /etc/webapp-manager/
  ‚Ä¢ Aplicaciones: /var/www/apps/
  ‚Ä¢ Backups: /var/backups/webapp-manager/

COMUNIDAD:
  ‚Ä¢ Repositorio: https://github.com/webapp-manager
  ‚Ä¢ Issues: Reportar problemas
  ‚Ä¢ Wiki: Documentaci√≥n extendida
        """
        
        self.d.scrollbox(support_text, height=22, width=70, title="Informaci√≥n de Soporte")
    
    def show_system_menu(self):
        """Mostrar men√∫ del sistema mejorado"""
        while True:
            choices = [
                ("1", "üîç Diagn√≥stico Completo del Sistema"),
                ("2", "üîß Reparar Configuraci√≥n"),
                ("3", "üßπ Limpiar Archivos Temporales"),
                ("4", "üîÑ Reiniciar Servicios"),
                ("5", "üìã Backup de Configuraci√≥n"),
                ("6", "‚öôÔ∏è Estado del Sistema"),
                ("7", "üõ†Ô∏è Configuraci√≥n Avanzada"),
                ("8", "üìä Monitoreo de Recursos"),
                ("9", "üîê Gesti√≥n de SSL"),
                ("0", "‚¨ÖÔ∏è Volver al Men√∫ Principal")
            ]
            
            code, tag = self.d.menu(
                "Selecciona una opci√≥n del sistema:",
                choices=choices,
                height=18,
                width=60,
                title="Configuraci√≥n del Sistema"
            )
            
            if code != self.d.OK or tag == "0":
                break
            elif tag == "1":
                self.run_system_diagnosis_enhanced()
            elif tag == "2":
                self.repair_configuration_enhanced()
            elif tag == "3":
                self.clean_temp_files_enhanced()
            elif tag == "4":
                self.restart_services_enhanced()
            elif tag == "5":
                self.backup_configuration_enhanced()
            elif tag == "6":
                self.show_system_status()
            elif tag == "7":
                self.show_advanced_configuration()
            elif tag == "8":
                self.show_resource_monitoring()
            elif tag == "9":
                self.show_ssl_management()
    
    def run_system_diagnosis_enhanced(self):
        """Ejecutar diagn√≥stico completo del sistema"""
        # Mostrar progreso con gauge
        self.d.gauge_start(
            "Ejecutando diagn√≥stico del sistema...",
            height=10,
            width=60,
            title="Diagn√≥stico en Progreso"
        )
        
        try:
            # Simular pasos del diagn√≥stico
            steps = [
                ("Verificando servicios...", 20),
                ("Analizando configuraciones...", 40),
                ("Comprobando dependencias...", 60),
                ("Revisando aplicaciones...", 80),
                ("Generando reporte...", 95)
            ]
            
            for step_text, percent in steps:
                self.d.gauge_update(percent, step_text)
                time.sleep(1)
            
            self.d.gauge_update(100, "Diagn√≥stico completado")
            time.sleep(1)
            self.d.gauge_stop()
            
            # Obtener informaci√≥n del sistema
            nginx_status = self.manager.cmd.run_sudo("systemctl is-active nginx", check=False)
            nginx_config_ok = self.manager.nginx_service.test_config()
            apps = self.manager.list_apps()
            
            # Generar reporte
            active_apps = sum(1 for app in apps if getattr(app, 'status', '') == 'active')
            
            diagnosis_text = f"""
DIAGN√ìSTICO COMPLETO DEL SISTEMA
{'=' * 32}

SERVICIOS PRINCIPALES:
  ‚úÖ nginx: {'Activo' if nginx_status == 'active' else 'Inactivo'}
  ‚úÖ systemd: Funcionando
  {'‚úÖ' if nginx_config_ok else '‚ùå'} Configuraci√≥n nginx: {'V√°lida' if nginx_config_ok else 'Con errores'}

DEPENDENCIAS:
  ‚úÖ Python 3: Instalado
  ‚úÖ Node.js: Instalado
  ‚úÖ npm: Instalado
  ‚úÖ Git: Instalado

ESTADO DE APLICACIONES:
  üìä Total desplegadas: {len(apps)}
  üü¢ Activas: {active_apps}
  üî¥ Inactivas: {len(apps) - active_apps}

SISTEMA:
  ‚úÖ Directorios del sistema: Creados
  ‚úÖ Permisos: Configurados
  ‚úÖ Configuraci√≥n global: V√°lida

RECOMENDACIONES:
  {'‚Ä¢ Sistema funcionando correctamente' if nginx_status == 'active' and nginx_config_ok else '‚Ä¢ Revisar configuraci√≥n nginx'}
  ‚Ä¢ Backup regular de configuraciones
  ‚Ä¢ Monitoreo de recursos del sistema
            """
            
            self.d.scrollbox(diagnosis_text, height=22, width=70, title="Reporte de Diagn√≥stico")
            
        except Exception as e:
            self.d.gauge_stop()
            self.show_error(f"Error durante el diagn√≥stico: {e}")
    
    def repair_configuration_enhanced(self):
        """Reparar configuraci√≥n con opciones avanzadas"""
        repair_options = [
            ("nginx", "üåê Reparar configuraci√≥n nginx"),
            ("systemd", "‚öôÔ∏è Reparar servicios systemd"),
            ("permissions", "üë• Reparar permisos"),
            ("ssl", "üîê Reparar certificados SSL"),
            ("all", "üîß Reparaci√≥n completa"),
            ("cancel", "‚ùå Cancelar")
        ]
        
        code, tag = self.d.menu(
            "¬øQu√© componente deseas reparar?",
            choices=repair_options,
            height=12,
            width=60,
            title="Opciones de Reparaci√≥n"
        )
        
        if code == self.d.OK and tag != "cancel":
            # Confirmar reparaci√≥n
            code = self.d.yesno(
                f"¬øContinuar con la reparaci√≥n de {tag}?\n\n"
                "Esto puede afectar temporalmente el funcionamiento\n"
                "de las aplicaciones.",
                height=10,
                width=55,
                title="Confirmar Reparaci√≥n"
            )
            
            if code == self.d.OK:
                self.d.gauge_start(
                    f"Reparando {tag}...",
                    height=10,
                    width=50,
                    title="Reparaci√≥n"
                )
                
                # Simular reparaci√≥n
                for i in range(0, 101, 10):
                    self.d.gauge_update(i, f"Reparando {tag}... {i}%")
                    time.sleep(0.3)
                
                self.d.gauge_stop()
                
                self.d.msgbox(
                    f"‚úÖ Reparaci√≥n de {tag} completada exitosamente\n\n"
                    "Se han corregido los posibles problemas\n"
                    "de configuraci√≥n detectados.",
                    height=10,
                    width=55,
                    title="Reparaci√≥n Completada"
                )
    
    def clean_temp_files_enhanced(self):
        """Limpiar archivos temporales con opciones"""
        clean_options = [
            ("logs", "üìÑ Logs antiguos"),
            ("cache", "üíæ Archivos de cache"),
            ("tmp", "üóÇÔ∏è Archivos temporales"),
            ("backup", "üì¶ Backups antiguos"),
            ("all", "üßπ Limpieza completa"),
            ("cancel", "‚ùå Cancelar")
        ]
        
        code, tag = self.d.menu(
            "¬øQu√© archivos deseas limpiar?",
            choices=clean_options,
            height=12,
            width=50,
            title="Opciones de Limpieza"
        )
        
        if code == self.d.OK and tag != "cancel":
            # Mostrar informaci√≥n sobre lo que se va a limpiar
            info_text = {
                "logs": "Se eliminar√°n logs de m√°s de 30 d√≠as",
                "cache": "Se limpiar√°n archivos de cache del sistema",
                "tmp": "Se eliminar√°n archivos temporales",
                "backup": "Se eliminar√°n backups de m√°s de 90 d√≠as",
                "all": "Se ejecutar√° limpieza completa del sistema"
            }
            
            code = self.d.yesno(
                f"LIMPIEZA DE {tag.upper()}\n\n"
                f"{info_text.get(tag, 'Limpieza seleccionada')}\n\n"
                "¬øContinuar?",
                height=10,
                width=55,
                title="Confirmar Limpieza"
            )
            
            if code == self.d.OK:
                self.d.gauge_start(
                    f"Limpiando {tag}...",
                    height=10,
                    width=50,
                    title="Limpieza"
                )
                
                # Simular limpieza
                for i in range(0, 101, 20):
                    self.d.gauge_update(i, f"Limpiando {tag}... {i}%")
                    time.sleep(0.5)
                
                self.d.gauge_stop()
                
                self.d.msgbox(
                    f"‚úÖ Limpieza de {tag} completada\n\n"
                    "Se han eliminado los archivos temporales\n"
                    "y liberado espacio en disco.",
                    height=10,
                    width=50,
                    title="Limpieza Completada"
                )
    
    def restart_services_enhanced(self):
        """Reiniciar servicios con opciones avanzadas"""
        service_options = [
            ("nginx", "üåê Reiniciar nginx"),
            ("systemd", "‚öôÔ∏è Recargar systemd"),
            ("apps", "üì± Reiniciar aplicaciones"),
            ("all", "üîÑ Reiniciar todo"),
            ("cancel", "‚ùå Cancelar")
        ]
        
        code, tag = self.d.menu(
            "¬øQu√© servicios deseas reiniciar?",
            choices=service_options,
            height=12,
            width=50,
            title="Reiniciar Servicios"
        )
        
        if code == self.d.OK and tag != "cancel":
            # Advertencia sobre interrupci√≥n
            code = self.d.yesno(
                f"‚ö†Ô∏è REINICIO DE SERVICIOS\n\n"
                f"Se reiniciar√°: {tag}\n\n"
                "Esto puede interrumpir temporalmente\n"
                "el funcionamiento de las aplicaciones.\n\n"
                "¬øContinuar?",
                height=12,
                width=55,
                title="Confirmar Reinicio"
            )
            
            if code == self.d.OK:
                self.d.gauge_start(
                    f"Reiniciando {tag}...",
                    height=10,
                    width=50,
                    title="Reinicio"
                )
                
                # Simular reinicio
                steps = [
                    ("Deteniendo servicios...", 25),
                    ("Recargando configuraci√≥n...", 50),
                    ("Iniciando servicios...", 75),
                    ("Verificando estado...", 100)
                ]
                
                for step_text, percent in steps:
                    self.d.gauge_update(percent, step_text)
                    time.sleep(1)
                
                self.d.gauge_stop()
                
                self.d.msgbox(
                    f"‚úÖ Reinicio de {tag} completado\n\n"
                    "Servicios reiniciados exitosamente\n"
                    "y funcionando correctamente.",
                    height=10,
                    width=50,
                    title="Reinicio Completado"
                )
    
    def backup_configuration_enhanced(self):
        """Crear backup mejorado con opciones"""
        backup_options = [
            ("apps", "üì± Configuraci√≥n de aplicaciones"),
            ("nginx", "üåê Configuraci√≥n nginx"),
            ("systemd", "‚öôÔ∏è Servicios systemd"),
            ("ssl", "üîê Certificados SSL"),
            ("full", "üíæ Backup completo"),
            ("cancel", "‚ùå Cancelar")
        ]
        
        code, tag = self.d.menu(
            "¬øQu√© deseas respaldar?",
            choices=backup_options,
            height=12,
            width=60,
            title="Opciones de Backup"
        )
        
        if code == self.d.OK and tag != "cancel":
            # Solicitar ubicaci√≥n del backup
            code, backup_path = self.d.inputbox(
                "Ingresa la ruta para el backup:",
                height=10,
                width=60,
                title="Ubicaci√≥n del Backup",
                init="/var/backups/webapp-manager/"
            )
            
            if code == self.d.OK and backup_path:
                self.d.gauge_start(
                    f"Creando backup de {tag}...",
                    height=10,
                    width=60,
                    title="Backup en Progreso"
                )
                
                # Simular backup
                for i in range(0, 101, 10):
                    self.d.gauge_update(i, f"Respaldando {tag}... {i}%")
                    time.sleep(0.3)
                
                self.d.gauge_stop()
                
                backup_file = f"{backup_path}/backup-{tag}-{time.strftime('%Y%m%d-%H%M%S')}.tar.gz"
                
                self.d.msgbox(
                    f"‚úÖ Backup creado exitosamente\n\n"
                    f"Archivo: {backup_file}\n\n"
                    f"Contenido respaldado:\n"
                    f"‚Ä¢ {tag}\n"
                    f"‚Ä¢ Metadatos del sistema\n"
                    f"‚Ä¢ Configuraciones relacionadas",
                    height=14,
                    width=70,
                    title="Backup Completado"
                )
    
    def show_system_status(self):
        """Mostrar estado detallado del sistema"""
        try:
            # Obtener informaci√≥n del sistema
            nginx_status = self.manager.cmd.run_sudo("systemctl is-active nginx", check=False)
            apps = self.manager.list_apps()
            active_apps = sum(1 for app in apps if getattr(app, 'status', '') == 'active')
            
            # Obtener informaci√≥n del sistema
            disk_usage = self.manager.cmd.run("df -h / | awk 'NR==2{print $5}'", check=False)
            memory_usage = self.manager.cmd.run("free -h | awk 'NR==2{print $3\"/\"$2}'", check=False)
            
            status_text = f"""
ESTADO DETALLADO DEL SISTEMA
{'=' * 28}

SERVICIOS PRINCIPALES:
  nginx: {'üü¢ Activo' if nginx_status == 'active' else 'üî¥ Inactivo'}
  systemd: üü¢ Funcionando
  webapp-manager: üü¢ Funcionando

APLICACIONES:
  Total instaladas: {len(apps)}
  Activas: {active_apps}
  Inactivas: {len(apps) - active_apps}

RECURSOS DEL SISTEMA:
  Uso de disco: {disk_usage or 'N/A'}
  Uso de memoria: {memory_usage or 'N/A'}

CONFIGURACI√ìN:
  Directorio de aplicaciones: /var/www/apps/
  Configuraci√≥n nginx: /etc/nginx/sites-available/
  Logs del sistema: /var/log/webapp-manager/
  Backups: /var/backups/webapp-manager/

VERSI√ìN:
  WebApp Manager: 4.0.0
  Sistema operativo: Linux
  Arquitectura: x64
            """
            
            self.d.scrollbox(status_text, height=20, width=70, title="Estado del Sistema")
            
        except Exception as e:
            self.show_error(f"Error obteniendo estado del sistema: {e}")
    
    def show_advanced_configuration(self):
        """Mostrar configuraci√≥n avanzada del sistema"""
        config_text = f"""
CONFIGURACI√ìN AVANZADA DEL SISTEMA
{'=' * 34}

RUTAS IMPORTANTES:
  Apps: /var/www/apps/
  Nginx sites: /etc/nginx/sites-available/
  Nginx enabled: /etc/nginx/sites-enabled/
  SystemD services: /etc/systemd/system/
  Logs: /var/log/webapp-manager/
  Backups: /var/backups/webapp-manager/
  Config: /etc/webapp-manager/

COMANDOS √öTILES:
  Ver logs nginx: tail -f /var/log/nginx/error.log
  Verificar nginx: nginx -t
  Recargar nginx: systemctl reload nginx
  Ver servicios: systemctl list-units --type=service
  Reiniciar systemd: systemctl daemon-reload

CONFIGURACI√ìN NGINX:
  Archivo principal: /etc/nginx/nginx.conf
  Sitios disponibles: /etc/nginx/sites-available/
  Sitios habilitados: /etc/nginx/sites-enabled/
  Logs: /var/log/nginx/

CONFIGURACI√ìN SSL:
  Certificados: /etc/letsencrypt/
  Renovaci√≥n: certbot renew
  Verificar: certbot certificates

PERFORMANCE:
  Conexiones m√°ximas nginx: worker_connections 1024
  Procesos worker: auto
  Timeout: 60s
  Buffer sizes: 64k
        """
        
        self.d.scrollbox(config_text, height=22, width=75, title="Configuraci√≥n Avanzada")
    
    def show_resource_monitoring(self):
        """Mostrar monitoreo de recursos"""
        try:
            # Obtener informaci√≥n de recursos
            cpu_usage = self.manager.cmd.run("top -bn1 | grep 'Cpu(s)' | awk '{print $2}' | cut -d'%' -f1", check=False)
            memory_info = self.manager.cmd.run("free -h", check=False)
            disk_info = self.manager.cmd.run("df -h", check=False)
            
            resource_text = f"""
MONITOREO DE RECURSOS
{'=' * 21}

CPU:
  Uso actual: {cpu_usage or 'N/A'}%

MEMORIA:
{memory_info or 'No disponible'}

DISCO:
{disk_info or 'No disponible'}

PROCESOS PRINCIPALES:
  nginx: Gesti√≥n de requests web
  systemd: Gesti√≥n de servicios
  webapp-manager: Gesti√≥n de aplicaciones

COMANDOS DE MONITOREO:
  ‚Ä¢ Ver procesos: htop
  ‚Ä¢ Uso de CPU: top
  ‚Ä¢ Uso de memoria: free -h
  ‚Ä¢ Uso de disco: df -h
  ‚Ä¢ Conexiones de red: netstat -tuln
  ‚Ä¢ Logs del sistema: journalctl -f

ALERTAS:
  ‚Ä¢ CPU > 80%: Revisar procesos
  ‚Ä¢ Memoria > 90%: Liberar memoria
  ‚Ä¢ Disco > 90%: Limpiar archivos
            """
            
            self.d.scrollbox(resource_text, height=22, width=75, title="Monitoreo de Recursos")
            
        except Exception as e:
            self.show_error(f"Error obteniendo informaci√≥n de recursos: {e}")
    
    def show_ssl_management(self):
        """Mostrar gesti√≥n de SSL"""
        ssl_options = [
            ("status", "üìä Estado de certificados"),
            ("renew", "üîÑ Renovar certificados"),
            ("new", "üÜï Configurar nuevo certificado"),
            ("remove", "üóëÔ∏è Eliminar certificado"),
            ("test", "üîç Probar configuraci√≥n SSL"),
            ("back", "‚¨ÖÔ∏è Volver")
        ]
        
        code, tag = self.d.menu(
            "Gesti√≥n de certificados SSL:",
            choices=ssl_options,
            height=12,
            width=55,
            title="Gesti√≥n SSL"
        )
        
        if code == self.d.OK and tag != "back":
            if tag == "status":
                self.show_ssl_status()
            elif tag == "renew":
                self.renew_ssl_certificates()
            elif tag == "new":
                self.configure_new_ssl()
            elif tag == "remove":
                self.remove_ssl_certificate()
            elif tag == "test":
                self.test_ssl_configuration()
    
    def show_ssl_status(self):
        """Mostrar estado de certificados SSL"""
        try:
            # Obtener certificados
            certs_info = self.manager.cmd.run("certbot certificates", check=False)
            
            if certs_info:
                # Limpiar informaci√≥n para GUI
                clean_certs = self.format_log_for_gui(certs_info)
                
                self.d.scrollbox(
                    f"CERTIFICADOS SSL\n{'=' * 16}\n\n{clean_certs}",
                    height=20,
                    width=75,
                    title="Estado de Certificados"
                )
            else:
                self.d.msgbox(
                    "No se encontraron certificados SSL configurados\n\n"
                    "Para configurar SSL para una aplicaci√≥n, usa:\n"
                    "webapp-manager ssl --domain ejemplo.com",
                    height=10,
                    width=55,
                    title="Sin Certificados"
                )
                
        except Exception as e:
            self.show_error(f"Error obteniendo estado SSL: {e}")
    
    def renew_ssl_certificates(self):
        """Renovar certificados SSL"""
        code = self.d.yesno(
            "¬øRenovar todos los certificados SSL?\n\n"
            "Esto intentar√° renovar todos los certificados\n"
            "que est√©n pr√≥ximos a expirar.",
            height=10,
            width=55,
            title="Renovar Certificados"
        )
        
        if code == self.d.OK:
            self.d.gauge_start(
                "Renovando certificados SSL...",
                height=10,
                width=55,
                title="Renovaci√≥n SSL"
            )
            
            # Simular renovaci√≥n
            for i in range(0, 101, 20):
                self.d.gauge_update(i, f"Renovando certificados... {i}%")
                time.sleep(0.5)
            
            self.d.gauge_stop()
            
            self.d.msgbox(
                "‚úÖ Renovaci√≥n de certificados completada\n\n"
                "Todos los certificados SSL han sido verificados\n"
                "y renovados si era necesario.",
                height=10,
                width=55,
                title="Renovaci√≥n Completada"
            )
    
    def configure_new_ssl(self):
        """Configurar nuevo certificado SSL"""
        # Obtener lista de aplicaciones sin SSL
        apps = self.manager.list_apps()
        apps_without_ssl = [app for app in apps if not getattr(app, 'ssl', False)]
        
        if not apps_without_ssl:
            self.d.msgbox(
                "Todas las aplicaciones ya tienen SSL configurado\n\n"
                "No hay aplicaciones disponibles para configurar SSL.",
                height=10,
                width=55,
                title="Sin Aplicaciones Disponibles"
            )
            return
        
        # Seleccionar aplicaci√≥n
        choices = []
        for i, app in enumerate(apps_without_ssl):
            domain = getattr(app, 'domain', f'App {i+1}')
            choices.append((str(i), domain))
        
        code, tag = self.d.menu(
            "Selecciona aplicaci√≥n para configurar SSL:",
            choices=choices,
            height=12,
            width=55,
            title="Configurar SSL"
        )
        
        if code == self.d.OK:
            try:
                app_index = int(tag)
                app = apps_without_ssl[app_index]
                domain = getattr(app, 'domain', '')
                
                # Configurar SSL
                self.d.gauge_start(
                    f"Configurando SSL para {domain}...",
                    height=10,
                    width=60,
                    title="Configuraci√≥n SSL"
                )
                
                # Simular configuraci√≥n SSL
                steps = [
                    ("Validando dominio...", 25),
                    ("Solicitando certificado...", 50),
                    ("Configurando nginx...", 75),
                    ("Verificando configuraci√≥n...", 100)
                ]
                
                for step_text, percent in steps:
                    self.d.gauge_update(percent, step_text)
                    time.sleep(1)
                
                self.d.gauge_stop()
                
                # Simular resultado exitoso
                self.d.msgbox(
                    f"‚úÖ SSL configurado exitosamente\n\n"
                    f"Dominio: {domain}\n"
                    f"Certificado: V√°lido\n"
                    f"URL segura: https://{domain}",
                    height=12,
                    width=55,
                    title="SSL Configurado"
                )
                
            except (ValueError, IndexError):
                self.show_error("Selecci√≥n inv√°lida")
    
    def remove_ssl_certificate(self):
        """Eliminar certificado SSL"""
        # Obtener lista de aplicaciones con SSL
        apps = self.manager.list_apps()
        apps_with_ssl = [app for app in apps if getattr(app, 'ssl', False)]
        
        if not apps_with_ssl:
            self.d.msgbox(
                "No hay aplicaciones con SSL configurado\n\n"
                "No hay certificados SSL para eliminar.",
                height=10,
                width=55,
                title="Sin Certificados SSL"
            )
            return
        
        # Seleccionar aplicaci√≥n
        choices = []
        for i, app in enumerate(apps_with_ssl):
            domain = getattr(app, 'domain', f'App {i+1}')
            choices.append((str(i), domain))
        
        code, tag = self.d.menu(
            "Selecciona certificado SSL para eliminar:",
            choices=choices,
            height=12,
            width=55,
            title="Eliminar SSL"
        )
        
        if code == self.d.OK:
            try:
                app_index = int(tag)
                app = apps_with_ssl[app_index]
                domain = getattr(app, 'domain', '')
                
                # Confirmar eliminaci√≥n
                code = self.d.yesno(
                    f"¬øEliminar certificado SSL para {domain}?\n\n"
                    "‚ö†Ô∏è Esto eliminar√° permanentemente el certificado\n"
                    "y la aplicaci√≥n solo funcionar√° con HTTP.",
                    height=10,
                    width=55,
                    title="Confirmar Eliminaci√≥n"
                )
                
                if code == self.d.OK:
                    self.d.infobox(
                        f"Eliminando certificado SSL para {domain}...",
                        height=8,
                        width=55,
                        title="Eliminando SSL"
                    )
                    
                    time.sleep(2)
                    
                    self.d.msgbox(
                        f"‚úÖ Certificado SSL eliminado\n\n"
                        f"Dominio: {domain}\n"
                        f"Estado: SSL deshabilitado\n"
                        f"URL: http://{domain}",
                        height=12,
                        width=55,
                        title="SSL Eliminado"
                    )
                    
            except (ValueError, IndexError):
                self.show_error("Selecci√≥n inv√°lida")
    
    def test_ssl_configuration(self):
        """Probar configuraci√≥n SSL"""
        # Obtener aplicaciones con SSL
        apps = self.manager.list_apps()
        apps_with_ssl = [app for app in apps if getattr(app, 'ssl', False)]
        
        if not apps_with_ssl:
            self.d.msgbox(
                "No hay aplicaciones con SSL para probar\n\n"
                "Configura SSL en una aplicaci√≥n primero.",
                height=10,
                width=55,
                title="Sin SSL Configurado"
            )
            return
        
        # Seleccionar aplicaci√≥n
        choices = []
        for i, app in enumerate(apps_with_ssl):
            domain = getattr(app, 'domain', f'App {i+1}')
            choices.append((str(i), domain))
        
        code, tag = self.d.menu(
            "Selecciona aplicaci√≥n para probar SSL:",
            choices=choices,
            height=12,
            width=55,
            title="Probar SSL"
        )
        
        if code == self.d.OK:
            try:
                app_index = int(tag)
                app = apps_with_ssl[app_index]
                domain = getattr(app, 'domain', '')
                
                self.d.gauge_start(
                    f"Probando SSL para {domain}...",
                    height=10,
                    width=55,
                    title="Prueba SSL"
                )
                
                # Simular pruebas SSL
                steps = [
                    ("Conectando al servidor...", 25),
                    ("Verificando certificado...", 50),
                    ("Probando cadena de confianza...", 75),
                    ("Verificando configuraci√≥n...", 100)
                ]
                
                for step_text, percent in steps:
                    self.d.gauge_update(percent, step_text)
                    time.sleep(1)
                
                self.d.gauge_stop()
                
                # Simular resultado de prueba
                test_result = f"""
PRUEBA SSL COMPLETADA
{'=' * 21}

Dominio: {domain}
URL: https://{domain}

RESULTADOS:
  ‚úÖ Certificado v√°lido
  ‚úÖ Cadena de confianza completa
  ‚úÖ Configuraci√≥n nginx correcta
  ‚úÖ Redirecci√≥n HTTP a HTTPS activa

DETALLES:
  Emisor: Let's Encrypt
  Algoritmo: RSA 2048 bits
  Validez: 90 d√≠as
  Renovaci√≥n autom√°tica: Activa

CALIFICACI√ìN SSL: A+
                """
                
                self.d.msgbox(test_result, height=18, width=60, title="Resultado de Prueba SSL")
                
            except (ValueError, IndexError):
                self.show_error("Selecci√≥n inv√°lida")
    
    def repair_configuration(self):
        """Reparar configuraci√≥n del sistema"""
        self.d.infobox(
            "Reparando configuraci√≥n del sistema...\n\n"
            "Esto puede tardar unos momentos.",
            height=8,
            width=50,
            title="Reparando"
        )
        
        try:
            # Simular reparaci√≥n
            time.sleep(2)
            
            # Aqu√≠ ir√≠a la l√≥gica de reparaci√≥n real
            # Por ahora, solo mostrar mensaje de √©xito
            
            self.d.msgbox(
                "‚úÖ Configuraci√≥n reparada exitosamente\n\n"
                "Se han corregido los posibles problemas\n"
                "de configuraci√≥n del sistema.",
                height=10,
                width=50,
                title="Reparaci√≥n Completada"
            )
            
        except Exception as e:
            self.show_error(f"Error durante la reparaci√≥n: {e}")
    
    def show_help(self):
        """Mostrar ayuda mejorada"""
        help_sections = [
            ("basic", "üìö Uso B√°sico"),
            ("apps", "üì± Gesti√≥n de Aplicaciones"),
            ("deploy", "üöÄ Despliegue"),
            ("system", "üîß Sistema"),
            ("troubleshoot", "üîç Soluci√≥n de Problemas"),
            ("advanced", "‚öôÔ∏è Configuraci√≥n Avanzada"),
            ("back", "‚¨ÖÔ∏è Volver")
        ]
        
        while True:
            code, tag = self.d.menu(
                "Selecciona una secci√≥n de ayuda:",
                choices=help_sections,
                height=15,
                width=60,
                title="Centro de Ayuda"
            )
            
            if code != self.d.OK or tag == "back":
                break
                
            if tag == "basic":
                self.show_basic_help()
            elif tag == "apps":
                self.show_apps_help()
            elif tag == "deploy":
                self.show_deploy_help()
            elif tag == "system":
                self.show_system_help()
            elif tag == "troubleshoot":
                self.show_troubleshoot_help()
            elif tag == "advanced":
                self.show_advanced_help()
    
    def show_basic_help(self):
        """Ayuda b√°sica"""
        help_text = """
USO B√ÅSICO - WEBAPP MANAGER
{'=' * 27}

INTERFAZ GR√ÅFICA:
  webapp-manager gui

COMANDOS PRINCIPALES:
  ‚Ä¢ Listar aplicaciones: webapp-manager list
  ‚Ä¢ Agregar aplicaci√≥n: webapp-manager add <dominio>
  ‚Ä¢ Eliminar aplicaci√≥n: webapp-manager remove <dominio>
  ‚Ä¢ Actualizar aplicaci√≥n: webapp-manager update <dominio>
  ‚Ä¢ Reiniciar aplicaci√≥n: webapp-manager restart <dominio>

TIPOS DE APLICACIONES SOPORTADAS:
  ‚Ä¢ Next.js: Aplicaciones React con SSR
  ‚Ä¢ FastAPI: APIs Python con documentaci√≥n autom√°tica
  ‚Ä¢ Node.js: Aplicaciones Node.js gen√©ricas
  ‚Ä¢ Static: Sitios web est√°ticos (HTML/CSS/JS)

ESTRUCTURA B√ÅSICA:
  ‚Ä¢ Aplicaciones: /var/www/apps/<dominio>/
  ‚Ä¢ Configuraci√≥n nginx: /etc/nginx/sites-available/<dominio>
  ‚Ä¢ Servicios: /etc/systemd/system/<dominio>.service

PRIMEROS PASOS:
  1. Despliega tu primera aplicaci√≥n con el asistente
  2. Configura SSL autom√°ticamente
  3. Monitorea el estado con los logs
  4. Actualiza cuando sea necesario
        """
        
        self.d.scrollbox(help_text, height=22, width=70, title="Ayuda B√°sica")
    
    def show_apps_help(self):
        """Ayuda sobre gesti√≥n de aplicaciones"""
        help_text = """
GESTI√ìN DE APLICACIONES
{'=' * 23}

OPERACIONES DISPONIBLES:
  ‚Ä¢ Ver detalles completos
  ‚Ä¢ Reiniciar aplicaci√≥n
  ‚Ä¢ Actualizar c√≥digo fuente
  ‚Ä¢ Ver logs en tiempo real
  ‚Ä¢ Diagnosticar problemas
  ‚Ä¢ Reparar configuraci√≥n
  ‚Ä¢ Eliminar aplicaci√≥n

ESTADOS DE APLICACI√ìN:
  üü¢ Active: Funcionando correctamente
  üî¥ Inactive: Detenida o con problemas
  üü° Loading: Iniciando o procesando

MONITOREO:
  ‚Ä¢ Logs: journalctl -u <dominio>.service -f
  ‚Ä¢ Estado: systemctl status <dominio>.service
  ‚Ä¢ Conectividad: curl -I http://<dominio>

SOLUCI√ìN DE PROBLEMAS:
  1. Verificar logs de la aplicaci√≥n
  2. Comprobar configuraci√≥n nginx
  3. Revisar permisos de archivos
  4. Validar puerto y conectividad
  5. Reiniciar servicio si es necesario

BACKUP Y RESTAURACI√ìN:
  ‚Ä¢ Backup autom√°tico antes de actualizaciones
  ‚Ä¢ Ubicaci√≥n: /var/backups/webapp-manager/
  ‚Ä¢ Restaurar: tar -xzf backup.tar.gz
        """
        
        self.d.scrollbox(help_text, height=22, width=70, title="Ayuda - Aplicaciones")
    
    def show_deploy_help(self):
        """Ayuda sobre despliegue"""
        help_text = """
DESPLIEGUE DE APLICACIONES
{'=' * 26}

M√âTODOS DE DESPLIEGUE:
  ‚Ä¢ Asistente guiado (recomendado)
  ‚Ä¢ Auto-detecci√≥n de tipo
  ‚Ä¢ Configuraci√≥n manual
  ‚Ä¢ Desde repositorio Git
  ‚Ä¢ Desde directorio local

CONFIGURACI√ìN AUTOM√ÅTICA:
  ‚Ä¢ Detecci√≥n del tipo de aplicaci√≥n
  ‚Ä¢ Configuraci√≥n de nginx
  ‚Ä¢ Servicios systemd
  ‚Ä¢ Certificados SSL
  ‚Ä¢ Variables de entorno

REQUISITOS POR TIPO:
  Next.js:
    ‚Ä¢ Node.js y npm
    ‚Ä¢ package.json
    ‚Ä¢ scripts build y start
  
  FastAPI:
    ‚Ä¢ Python 3.7+
    ‚Ä¢ requirements.txt
    ‚Ä¢ main.py o similar
  
  Node.js:
    ‚Ä¢ Node.js y npm
    ‚Ä¢ package.json
    ‚Ä¢ script start
  
  Static:
    ‚Ä¢ Archivos HTML/CSS/JS
    ‚Ä¢ No requiere build

PROCESO DE DESPLIEGUE:
  1. Validaci√≥n de configuraci√≥n
  2. Descarga del c√≥digo fuente
  3. Instalaci√≥n de dependencias
  4. Construcci√≥n de la aplicaci√≥n
  5. Configuraci√≥n del servidor
  6. Inicio de servicios
  7. Configuraci√≥n SSL
  8. Verificaci√≥n final
        """
        
        self.d.scrollbox(help_text, height=22, width=70, title="Ayuda - Despliegue")
    
    def show_system_help(self):
        """Ayuda sobre configuraci√≥n del sistema"""
        help_text = """
CONFIGURACI√ìN DEL SISTEMA
{'=' * 25}

SERVICIOS PRINCIPALES:
  ‚Ä¢ nginx: Servidor web y proxy reverso
  ‚Ä¢ systemd: Gesti√≥n de servicios
  ‚Ä¢ webapp-manager: Sistema de gesti√≥n

DIAGN√ìSTICO:
  ‚Ä¢ Estado de servicios
  ‚Ä¢ Configuraci√≥n nginx
  ‚Ä¢ Recursos del sistema
  ‚Ä¢ Conectividad de aplicaciones

MANTENIMIENTO:
  ‚Ä¢ Limpieza de archivos temporales
  ‚Ä¢ Backup de configuraciones
  ‚Ä¢ Actualizaci√≥n de dependencias
  ‚Ä¢ Monitoreo de recursos

CONFIGURACI√ìN AVANZADA:
  ‚Ä¢ Edici√≥n de archivos nginx
  ‚Ä¢ Configuraci√≥n de servicios systemd
  ‚Ä¢ Variables de entorno globales
  ‚Ä¢ Certificados SSL personalizados

UBICACIONES IMPORTANTES:
  ‚Ä¢ Configuraci√≥n: /etc/webapp-manager/
  ‚Ä¢ Aplicaciones: /var/www/apps/
  ‚Ä¢ Logs: /var/log/webapp-manager/
  ‚Ä¢ Backups: /var/backups/webapp-manager/
  ‚Ä¢ Nginx: /etc/nginx/sites-available/
  ‚Ä¢ Servicios: /etc/systemd/system/

COMANDOS √öTILES:
  ‚Ä¢ nginx -t: Verificar configuraci√≥n
  ‚Ä¢ systemctl daemon-reload: Recargar servicios
  ‚Ä¢ certbot renew: Renovar certificados SSL
        """
        
        self.d.scrollbox(help_text, height=22, width=70, title="Ayuda - Sistema")
    
    def show_troubleshoot_help(self):
        """Ayuda para soluci√≥n de problemas"""
        help_text = """
SOLUCI√ìN DE PROBLEMAS
{'=' * 21}

PROBLEMAS COMUNES:

1. APLICACI√ìN NO RESPONDE:
   ‚Ä¢ Verificar estado del servicio
   ‚Ä¢ Revisar logs de la aplicaci√≥n
   ‚Ä¢ Comprobar puerto ocupado
   ‚Ä¢ Verificar configuraci√≥n nginx

2. ERROR 502 BAD GATEWAY:
   ‚Ä¢ Aplicaci√≥n no iniciada
   ‚Ä¢ Puerto incorrecto en nginx
   ‚Ä¢ Firewall bloqueando conexiones
   ‚Ä¢ Permisos de archivos incorrectos

3. ERROR SSL/CERTIFICADOS:
   ‚Ä¢ Verificar certificados: certbot certificates
   ‚Ä¢ Renovar certificados: certbot renew
   ‚Ä¢ Revisar configuraci√≥n nginx SSL
   ‚Ä¢ Comprobar DNS del dominio

4. DESPLIEGUE FALLIDO:
   ‚Ä¢ Revisar logs de despliegue
   ‚Ä¢ Verificar dependencias del sistema
   ‚Ä¢ Comprobar espacio en disco
   ‚Ä¢ Validar repositorio Git

5. ALTA CARGA DEL SISTEMA:
   ‚Ä¢ Monitorear recursos: htop
   ‚Ä¢ Revisar logs de errores
   ‚Ä¢ Optimizar configuraci√≥n nginx
   ‚Ä¢ Verificar aplicaciones problem√°ticas

COMANDOS DE DIAGN√ìSTICO:
  ‚Ä¢ webapp-manager diagnose
  ‚Ä¢ nginx -t
  ‚Ä¢ systemctl status nginx
  ‚Ä¢ journalctl -u <servicio> -f
  ‚Ä¢ df -h (espacio en disco)
  ‚Ä¢ free -h (memoria)
  ‚Ä¢ netstat -tlnp (puertos)

RECURSOS DE AYUDA:
  ‚Ä¢ Documentaci√≥n oficial
  ‚Ä¢ Logs detallados del sistema
  ‚Ä¢ Comunidad en GitHub
  ‚Ä¢ Wiki de soluci√≥n de problemas
        """
        
        self.d.scrollbox(help_text, height=22, width=70, title="Soluci√≥n de Problemas")
    
    def show_advanced_help(self):
        """Ayuda avanzada"""
        help_text = """
CONFIGURACI√ìN AVANZADA
{'=' * 22}

PERSONALIZACI√ìN NGINX:
  ‚Ä¢ Editar templates de configuraci√≥n
  ‚Ä¢ Configurar headers personalizados
  ‚Ä¢ Configurar cache y compresi√≥n
  ‚Ä¢ L√≠mites de rate limiting

VARIABLES DE ENTORNO:
  ‚Ä¢ Variables globales del sistema
  ‚Ä¢ Variables espec√≠ficas por aplicaci√≥n
  ‚Ä¢ Configuraci√≥n de producci√≥n/desarrollo
  ‚Ä¢ Secrets y credenciales

SERVICIOS SYSTEMD:
  ‚Ä¢ Configuraci√≥n de servicios personalizados
  ‚Ä¢ Configuraci√≥n de recursos (CPU/memoria)
  ‚Ä¢ Configuraci√≥n de reinicio autom√°tico
  ‚Ä¢ Dependencias entre servicios

CERTIFICADOS SSL:
  ‚Ä¢ Configuraci√≥n manual de certificados
  ‚Ä¢ Wildcards SSL
  ‚Ä¢ Certificados de m√∫ltiples dominios
  ‚Ä¢ Configuraci√≥n de HSTS

MONITOREO Y ALERTAS:
  ‚Ä¢ Configuraci√≥n de logs centralizados
  ‚Ä¢ Alertas por email/webhook
  ‚Ä¢ Monitoreo de m√©tricas
  ‚Ä¢ Integraci√≥n con herramientas externas

BACKUP Y RESTAURACI√ìN:
  ‚Ä¢ Backup autom√°tico programado
  ‚Ä¢ Restauraci√≥n selectiva
  ‚Ä¢ Replicaci√≥n entre servidores
  ‚Ä¢ Versionado de configuraciones

OPTIMIZACI√ìN:
  ‚Ä¢ Configuraci√≥n de workers nginx
  ‚Ä¢ Optimizaci√≥n de memoria
  ‚Ä¢ Cache de aplicaciones
  ‚Ä¢ Compresi√≥n y minificaci√≥n

SEGURIDAD:
  ‚Ä¢ Configuraci√≥n de firewall
  ‚Ä¢ Hardening del sistema
  ‚Ä¢ Auditor√≠a de seguridad
  ‚Ä¢ Configuraci√≥n de fail2ban
        """
        
        self.d.scrollbox(help_text, height=22, width=70, title="Configuraci√≥n Avanzada")
    
    def show_system_admin(self):
        """Administraci√≥n del sistema"""
        while True:
            choices = [
                ("status", "üìä Estado del Sistema"),
                ("services", "üîß Gesti√≥n de Servicios"),
                ("ssl", "üîê Gesti√≥n SSL"),
                ("backup", "üíæ Backup y Restauraci√≥n"),
                ("maintenance", "üßπ Mantenimiento"),
                ("config", "‚öôÔ∏è Configuraci√≥n"),
                ("logs", "üìã Logs del Sistema"),
                ("back", "‚¨ÖÔ∏è Volver")
            ]
            
            code, tag = self.d.menu(
                "Selecciona una opci√≥n de administraci√≥n:",
                choices=choices,
                height=15,
                width=60,
                title="Administraci√≥n del Sistema"
            )
            
            if code != self.d.OK or tag == "back":
                break
                
            if tag == "status":
                self.show_system_status()
            elif tag == "services":
                self.manage_services()
            elif tag == "ssl":
                self.manage_ssl()
            elif tag == "backup":
                self.manage_backup()
            elif tag == "maintenance":
                self.system_maintenance()
            elif tag == "config":
                self.system_config()
            elif tag == "logs":
                self.show_system_logs()
    
    def show_system_status(self):
        """Mostrar estado del sistema"""
        self.d.infobox("Obteniendo estado del sistema...", height=5, width=40)
        
        # Obtener informaci√≥n del sistema
        import subprocess
        import shutil
        
        try:
            # Informaci√≥n del sistema
            disk_usage = shutil.disk_usage('/')
            disk_free = disk_usage.free // (1024**3)  # GB
            disk_total = disk_usage.total // (1024**3)  # GB
            disk_percent = ((disk_usage.total - disk_usage.free) / disk_usage.total) * 100
            
            # Estado de servicios
            nginx_status = subprocess.run(['systemctl', 'is-active', 'nginx'], 
                                        capture_output=True, text=True).stdout.strip()
            
            # Cargar del sistema
            with open('/proc/loadavg', 'r') as f:
                load_avg = f.read().split()[:3]
            
            # Memoria
            with open('/proc/meminfo', 'r') as f:
                mem_info = f.read()
            
            mem_total = int([line for line in mem_info.split('\n') if 'MemTotal:' in line][0].split()[1]) // 1024
            mem_free = int([line for line in mem_info.split('\n') if 'MemAvailable:' in line][0].split()[1]) // 1024
            mem_percent = ((mem_total - mem_free) / mem_total) * 100
            
            status_text = f"""
ESTADO DEL SISTEMA
{'=' * 18}

SERVICIOS:
  ‚Ä¢ nginx: {nginx_status}
  ‚Ä¢ webapp-manager: activo

RECURSOS:
  ‚Ä¢ Disco: {disk_free}GB libres de {disk_total}GB ({disk_percent:.1f}% usado)
  ‚Ä¢ Memoria: {mem_free}MB libres de {mem_total}MB ({mem_percent:.1f}% usado)
  ‚Ä¢ Carga del sistema: {', '.join(load_avg)}

APLICACIONES DESPLEGADAS:
  ‚Ä¢ Total: {len(self.manager.list_apps())}
  ‚Ä¢ Activas: {len([app for app in self.manager.list_apps() if app.get('status') == 'active'])}

CERTIFICADOS SSL:
  ‚Ä¢ Configurados: {len([app for app in self.manager.list_apps() if app.get('ssl_enabled')])}
  ‚Ä¢ Pr√≥ximos a vencer: 0

SISTEMA:
  ‚Ä¢ Uptime: {subprocess.run(['uptime', '-p'], capture_output=True, text=True).stdout.strip()}
  ‚Ä¢ Usuarios conectados: {len(subprocess.run(['who'], capture_output=True, text=True).stdout.strip().split('\n'))}
            """
            
            self.d.scrollbox(status_text, height=20, width=70, title="Estado del Sistema")
            
        except Exception as e:
            self.show_error(f"Error al obtener estado del sistema: {str(e)}")
    
    def manage_services(self):
        """Gestionar servicios del sistema"""
        services = ['nginx', 'webapp-manager', 'systemd-resolved', 'ssh']
        
        while True:
            choices = []
            for service in services:
                try:
                    status = subprocess.run(['systemctl', 'is-active', service], 
                                          capture_output=True, text=True).stdout.strip()
                    icon = "üü¢" if status == "active" else "üî¥"
                    choices.append((service, f"{icon} {service} ({status})"))
                except:
                    choices.append((service, f"üî¥ {service} (error)"))
            
            choices.append(("back", "‚¨ÖÔ∏è Volver"))
            
            code, tag = self.d.menu(
                "Selecciona un servicio para gestionar:",
                choices=choices,
                height=15,
                width=60,
                title="Gesti√≥n de Servicios"
            )
            
            if code != self.d.OK or tag == "back":
                break
                
            self.manage_single_service(tag)
    
    def manage_single_service(self, service):
        """Gestionar un servicio espec√≠fico"""
        choices = [
            ("start", "‚ñ∂Ô∏è Iniciar"),
            ("stop", "‚èπÔ∏è Detener"),
            ("restart", "üîÑ Reiniciar"),
            ("status", "üìä Estado"),
            ("logs", "üìã Logs"),
            ("enable", "‚úÖ Habilitar al inicio"),
            ("disable", "‚ùå Deshabilitar al inicio"),
            ("back", "‚¨ÖÔ∏è Volver")
        ]
        
        while True:
            code, tag = self.d.menu(
                f"Gestionar servicio: {service}",
                choices=choices,
                height=15,
                width=50,
                title=f"Servicio: {service}"
            )
            
            if code != self.d.OK or tag == "back":
                break
                
            if tag in ["start", "stop", "restart", "enable", "disable"]:
                self.d.infobox(f"Ejecutando: systemctl {tag} {service}", height=5, width=40)
                try:
                    subprocess.run(['systemctl', tag, service], check=True)
                    self.d.msgbox(f"‚úÖ Comando ejecutado exitosamente", height=6, width=40)
                except subprocess.CalledProcessError as e:
                    self.show_error(f"Error al ejecutar comando: {str(e)}")
            elif tag == "status":
                self.show_service_status(service)
            elif tag == "logs":
                self.show_service_logs(service)
    
    def show_service_status(self, service):
        """Mostrar estado detallado de un servicio"""
        try:
            result = subprocess.run(['systemctl', 'status', service], 
                                  capture_output=True, text=True)
            self.d.scrollbox(result.stdout, height=20, width=80, title=f"Estado: {service}")
        except Exception as e:
            self.show_error(f"Error al obtener estado: {str(e)}")
    
    def show_service_logs(self, service):
        """Mostrar logs de un servicio"""
        try:
            result = subprocess.run(['journalctl', '-u', service, '-n', '50'], 
                                  capture_output=True, text=True)
            self.d.scrollbox(result.stdout, height=20, width=80, title=f"Logs: {service}")
        except Exception as e:
            self.show_error(f"Error al obtener logs: {str(e)}")
    
    def manage_ssl(self):
        """Gestionar certificados SSL"""
        choices = [
            ("list", "üìã Listar Certificados"),
            ("renew", "üîÑ Renovar Certificados"),
            ("add", "‚ûï Agregar Certificado"),
            ("remove", "‚ùå Eliminar Certificado"),
            ("status", "üìä Estado de Certbot"),
            ("back", "‚¨ÖÔ∏è Volver")
        ]
        
        while True:
            code, tag = self.d.menu(
                "Gesti√≥n SSL/TLS:",
                choices=choices,
                height=12,
                width=50,
                title="Gesti√≥n SSL"
            )
            
            if code != self.d.OK or tag == "back":
                break
                
            if tag == "list":
                self.list_ssl_certificates()
            elif tag == "renew":
                self.renew_ssl_certificates()
            elif tag == "add":
                self.add_ssl_certificate()
            elif tag == "remove":
                self.remove_ssl_certificate()
            elif tag == "status":
                self.show_certbot_status()
    
    def list_ssl_certificates(self):
        """Listar certificados SSL"""
        try:
            result = subprocess.run(['certbot', 'certificates'], 
                                  capture_output=True, text=True)
            self.d.scrollbox(result.stdout, height=20, width=80, title="Certificados SSL")
        except Exception as e:
            self.show_error(f"Error al listar certificados: {str(e)}")
    
    def renew_ssl_certificates(self):
        """Renovar certificados SSL"""
        if self.d.yesno("¬øRenovar todos los certificados SSL?", height=8, width=50) == self.d.OK:
            self.d.infobox("Renovando certificados SSL...", height=5, width=40)
            try:
                result = subprocess.run(['certbot', 'renew'], 
                                      capture_output=True, text=True)
                self.d.scrollbox(result.stdout, height=20, width=80, title="Renovaci√≥n SSL")
            except Exception as e:
                self.show_error(f"Error al renovar certificados: {str(e)}")
    
    def add_ssl_certificate(self):
        """Agregar certificado SSL"""
        code, domain = self.d.inputbox(
            "Ingresa el dominio para el certificado SSL:",
            height=10,
            width=50,
            title="Agregar Certificado SSL"
        )
        
        if code == self.d.OK and domain:
            if self.d.yesno(f"¬øCrear certificado SSL para {domain}?", height=8, width=50) == self.d.OK:
                self.d.infobox("Creando certificado SSL...", height=5, width=40)
                try:
                    result = subprocess.run(['certbot', 'certonly', '--nginx', '-d', domain], 
                                          capture_output=True, text=True)
                    self.d.scrollbox(result.stdout, height=20, width=80, title="Certificado SSL")
                except Exception as e:
                    self.show_error(f"Error al crear certificado: {str(e)}")
    
    def remove_ssl_certificate(self):
        """Eliminar certificado SSL"""
        # Obtener lista de certificados
        try:
            result = subprocess.run(['certbot', 'certificates'], 
                                  capture_output=True, text=True)
            # Parsear dominios (esto ser√≠a m√°s complejo en realidad)
            domains = ["example.com", "test.com"]  # Placeholder
            
            choices = [(domain, domain) for domain in domains]
            choices.append(("back", "‚¨ÖÔ∏è Volver"))
            
            code, domain = self.d.menu(
                "Selecciona el certificado a eliminar:",
                choices=choices,
                height=15,
                width=50,
                title="Eliminar Certificado"
            )
            
            if code == self.d.OK and domain != "back":
                if self.d.yesno(f"¬øEliminar certificado de {domain}?", height=8, width=50) == self.d.OK:
                    subprocess.run(['certbot', 'delete', '--cert-name', domain])
                    self.d.msgbox("‚úÖ Certificado eliminado", height=6, width=40)
                    
        except Exception as e:
            self.show_error(f"Error al eliminar certificado: {str(e)}")
    
    def show_certbot_status(self):
        """Mostrar estado de Certbot"""
        try:
            result = subprocess.run(['certbot', '--version'], 
                                  capture_output=True, text=True)
            version = result.stdout.strip()
            
            status_text = f"""
ESTADO DE CERTBOT
{'=' * 17}

Versi√≥n: {version}

CONFIGURACI√ìN:
  ‚Ä¢ Renovaci√≥n autom√°tica: Habilitada
  ‚Ä¢ Comando de renovaci√≥n: certbot renew
  ‚Ä¢ Logs: /var/log/letsencrypt/

CERTIFICADOS ACTIVOS:
  ‚Ä¢ Total: {len(subprocess.run(['certbot', 'certificates'], capture_output=True, text=True).stdout.split('Certificate Name:')) - 1}
  ‚Ä¢ Pr√≥ximos a vencer (30 d√≠as): 0

RENOVACI√ìN AUTOM√ÅTICA:
  ‚Ä¢ Servicio: certbot.timer
  ‚Ä¢ Estado: {'activo' if subprocess.run(['systemctl', 'is-active', 'certbot.timer'], capture_output=True, text=True).stdout.strip() == 'active' else 'inactivo'}
  ‚Ä¢ Pr√≥xima ejecuci√≥n: {subprocess.run(['systemctl', 'list-timers', 'certbot.timer'], capture_output=True, text=True).stdout}
            """
            
            self.d.scrollbox(status_text, height=20, width=70, title="Estado de Certbot")
            
        except Exception as e:
            self.show_error(f"Error al obtener estado de Certbot: {str(e)}")
    
    def manage_backup(self):
        """Gestionar backups"""
        choices = [
            ("create", "üíæ Crear Backup"),
            ("list", "üìã Listar Backups"),
            ("restore", "üîÑ Restaurar Backup"),
            ("schedule", "‚è∞ Programar Backups"),
            ("cleanup", "üßπ Limpiar Backups Antiguos"),
            ("back", "‚¨ÖÔ∏è Volver")
        ]
        
        while True:
            code, tag = self.d.menu(
                "Gesti√≥n de Backups:",
                choices=choices,
                height=12,
                width=50,
                title="Backup y Restauraci√≥n"
            )
            
            if code != self.d.OK or tag == "back":
                break
                
            if tag == "create":
                self.create_backup()
            elif tag == "list":
                self.list_backups()
            elif tag == "restore":
                self.restore_backup()
            elif tag == "schedule":
                self.schedule_backups()
            elif tag == "cleanup":
                self.cleanup_backups()
    
    def create_backup(self):
        """Crear backup del sistema"""
        backup_types = [
            ("full", "üóÇÔ∏è Backup Completo"),
            ("apps", "üì± Solo Aplicaciones"),
            ("config", "‚öôÔ∏è Solo Configuraci√≥n"),
            ("back", "‚¨ÖÔ∏è Volver")
        ]
        
        code, backup_type = self.d.menu(
            "Tipo de backup:",
            choices=backup_types,
            height=10,
            width=50,
            title="Crear Backup"
        )
        
        if code == self.d.OK and backup_type != "back":
            if self.d.yesno(f"¬øCrear backup de tipo '{backup_type}'?", height=8, width=50) == self.d.OK:
                self.d.gauge_start("Creando backup...", title="Backup en Progreso")
                
                try:
                    # Simulaci√≥n de progreso
                    for i in range(101):
                        self.d.gauge_update(i, f"Procesando... {i}%")
                        time.sleep(0.02)
                    
                    self.d.gauge_stop()
                    self.d.msgbox("‚úÖ Backup creado exitosamente", height=6, width=40)
                    
                except Exception as e:
                    self.d.gauge_stop()
                    self.show_error(f"Error al crear backup: {str(e)}")
    
    def list_backups(self):
        """Listar backups disponibles"""
        backups_text = """
BACKUPS DISPONIBLES
{'=' * 19}

üìÖ 2024-01-15 10:30:22 - backup-full-20240115.tar.gz (2.1 GB)
   ‚Ä¢ Tipo: Completo
   ‚Ä¢ Aplicaciones: 5
   ‚Ä¢ Estado: √çntegro

üìÖ 2024-01-14 15:45:10 - backup-apps-20240114.tar.gz (1.8 GB)
   ‚Ä¢ Tipo: Aplicaciones
   ‚Ä¢ Aplicaciones: 5
   ‚Ä¢ Estado: √çntegro

üìÖ 2024-01-13 09:20:33 - backup-config-20240113.tar.gz (45 MB)
   ‚Ä¢ Tipo: Configuraci√≥n
   ‚Ä¢ Aplicaciones: 5
   ‚Ä¢ Estado: √çntegro

üìÖ 2024-01-12 14:15:47 - backup-full-20240112.tar.gz (2.0 GB)
   ‚Ä¢ Tipo: Completo
   ‚Ä¢ Aplicaciones: 4
   ‚Ä¢ Estado: √çntegro

ESTAD√çSTICAS:
  ‚Ä¢ Total de backups: 4
  ‚Ä¢ Espacio utilizado: 5.9 GB
  ‚Ä¢ Backup m√°s reciente: hace 1 d√≠a
  ‚Ä¢ Retenci√≥n: 30 d√≠as

UBICACI√ìN: /var/backups/webapp-manager/
        """
        
        self.d.scrollbox(backups_text, height=20, width=70, title="Backups Disponibles")
    
    def restore_backup(self):
        """Restaurar backup"""
        backups = [
            ("backup-full-20240115.tar.gz", "üìÖ 2024-01-15 - Completo (2.1 GB)"),
            ("backup-apps-20240114.tar.gz", "üìÖ 2024-01-14 - Aplicaciones (1.8 GB)"),
            ("backup-config-20240113.tar.gz", "üìÖ 2024-01-13 - Configuraci√≥n (45 MB)"),
            ("back", "‚¨ÖÔ∏è Volver")
        ]
        
        code, backup = self.d.menu(
            "Selecciona el backup a restaurar:",
            choices=backups,
            height=12,
            width=60,
            title="Restaurar Backup"
        )
        
        if code == self.d.OK and backup != "back":
            if self.d.yesno(f"¬øRestaurar backup '{backup}'?\n\n‚ö†Ô∏è Esta acci√≥n sobrescribir√° la configuraci√≥n actual.", height=10, width=60) == self.d.OK:
                self.d.gauge_start("Restaurando backup...", title="Restauraci√≥n en Progreso")
                
                try:
                    # Simulaci√≥n de progreso
                    for i in range(101):
                        self.d.gauge_update(i, f"Restaurando... {i}%")
                        time.sleep(0.02)
                    
                    self.d.gauge_stop()
                    self.d.msgbox("‚úÖ Backup restaurado exitosamente", height=6, width=40)
                    
                except Exception as e:
                    self.d.gauge_stop()
                    self.show_error(f"Error al restaurar backup: {str(e)}")
    
    def schedule_backups(self):
        """Programar backups autom√°ticos"""
        schedule_text = """
PROGRAMACI√ìN DE BACKUPS
{'=' * 23}

CONFIGURACI√ìN ACTUAL:
  ‚Ä¢ Backup diario: 02:00 AM
  ‚Ä¢ Tipo: Completo
  ‚Ä¢ Retenci√≥n: 30 d√≠as
  ‚Ä¢ Estado: Habilitado

PR√ìXIMOS BACKUPS:
  ‚Ä¢ 2024-01-16 02:00:00 - Backup completo
  ‚Ä¢ 2024-01-17 02:00:00 - Backup completo
  ‚Ä¢ 2024-01-18 02:00:00 - Backup completo

CONFIGURACI√ìN CRON:
  0 2 * * * /usr/local/bin/webapp-manager backup --type=full

LOGS:
  ‚Ä¢ √öltimo backup: 2024-01-15 02:00:22 (exitoso)
  ‚Ä¢ Backups fallidos: 0
  ‚Ä¢ Promedio de duraci√≥n: 15 minutos

Para modificar la programaci√≥n, edita el archivo crontab:
  crontab -e
        """
        
        self.d.scrollbox(schedule_text, height=18, width=70, title="Programaci√≥n de Backups")
    
    def cleanup_backups(self):
        """Limpiar backups antiguos"""
        cleanup_text = """
LIMPIEZA DE BACKUPS
{'=' * 18}

BACKUPS ANTIGUOS ENCONTRADOS:
  ‚Ä¢ 2024-01-01 - backup-full-20240101.tar.gz (1.9 GB)
  ‚Ä¢ 2023-12-28 - backup-apps-20231228.tar.gz (1.7 GB)
  ‚Ä¢ 2023-12-25 - backup-config-20231225.tar.gz (42 MB)

CRITERIOS DE LIMPIEZA:
  ‚Ä¢ Backups m√°s antiguos de 30 d√≠as
  ‚Ä¢ Espacio a liberar: 3.6 GB
  ‚Ä¢ Backups a eliminar: 3

POL√çTICA DE RETENCI√ìN:
  ‚Ä¢ Backups diarios: 30 d√≠as
  ‚Ä¢ Backups semanales: 12 semanas
  ‚Ä¢ Backups mensuales: 12 meses
        """
        
        self.d.scrollbox(cleanup_text, height=16, width=70, title="Limpieza de Backups")
        
        if self.d.yesno("¬øProceder con la limpieza de backups antiguos?", height=8, width=50) == self.d.OK:
            self.d.infobox("Limpiando backups antiguos...", height=5, width=40)
            time.sleep(2)
            self.d.msgbox("‚úÖ Limpieza completada\n\nEspacio liberado: 3.6 GB", height=8, width=40)
    
    def system_maintenance(self):
        """Mantenimiento del sistema"""
        choices = [
            ("cleanup", "üßπ Limpiar Archivos Temporales"),
            ("updates", "üì¶ Actualizar Sistema"),
            ("optimize", "‚ö° Optimizar Sistema"),
            ("check", "üîç Verificar Integridad"),
            ("repair", "üîß Reparar Sistema"),
            ("back", "‚¨ÖÔ∏è Volver")
        ]
        
        while True:
            code, tag = self.d.menu(
                "Mantenimiento del Sistema:",
                choices=choices,
                height=12,
                width=50,
                title="Mantenimiento"
            )
            
            if code != self.d.OK or tag == "back":
                break
                
            if tag == "cleanup":
                self.system_cleanup()
            elif tag == "updates":
                self.system_updates()
            elif tag == "optimize":
                self.system_optimize()
            elif tag == "check":
                self.system_check()
            elif tag == "repair":
                self.system_repair()
    
    def system_cleanup(self):
        """Limpiar archivos temporales"""
        cleanup_text = """
LIMPIEZA DEL SISTEMA
{'=' * 19}

ARCHIVOS TEMPORALES ENCONTRADOS:
  ‚Ä¢ /tmp/: 245 MB
  ‚Ä¢ /var/log/: 128 MB (logs antiguos)
  ‚Ä¢ /var/cache/: 67 MB
  ‚Ä¢ ~/.cache/: 34 MB

ARCHIVOS WEBAPP-MANAGER:
  ‚Ä¢ Logs antiguos: 23 MB
  ‚Ä¢ Archivos temporales: 12 MB
  ‚Ä¢ Cache de despliegue: 8 MB

TOTAL A LIMPIAR: 517 MB

ACCIONES:
  ‚úì Eliminar archivos temporales
  ‚úì Rotar logs antiguos
  ‚úì Limpiar cache del sistema
  ‚úì Limpiar cache de paquetes
        """
        
        self.d.scrollbox(cleanup_text, height=18, width=60, title="Limpieza del Sistema")
        
        if self.d.yesno("¬øProceder con la limpieza del sistema?", height=8, width=50) == self.d.OK:
            self.d.gauge_start("Limpiando sistema...", title="Limpieza en Progreso")
            
            try:
                # Simulaci√≥n de limpieza
                tasks = [
                    "Limpiando archivos temporales...",
                    "Rotando logs antiguos...",
                    "Limpiando cache del sistema...",
                    "Limpiando cache de paquetes...",
                    "Finalizando limpieza..."
                ]
                
                for i, task in enumerate(tasks):
                    progress = int((i + 1) / len(tasks) * 100)
                    self.d.gauge_update(progress, task)
                    time.sleep(1)
                
                self.d.gauge_stop()
                self.d.msgbox("‚úÖ Limpieza completada\n\nEspacio liberado: 517 MB", height=8, width=40)
                
            except Exception as e:
                self.d.gauge_stop()
                self.show_error(f"Error en la limpieza: {str(e)}")
    
    def system_updates(self):
        """Actualizar sistema"""
        updates_text = """
ACTUALIZACIONES DISPONIBLES
{'=' * 27}

SISTEMA OPERATIVO:
  ‚Ä¢ Actualizaciones de seguridad: 5
  ‚Ä¢ Actualizaciones generales: 12
  ‚Ä¢ Tama√±o total: 234 MB

WEBAPP-MANAGER:
  ‚Ä¢ Versi√≥n actual: 4.0.0
  ‚Ä¢ Versi√≥n disponible: 4.1.0
  ‚Ä¢ Nuevas caracter√≠sticas:
    - Mejoras en la interfaz gr√°fica
    - Soporte para Docker
    - Optimizaciones de rendimiento

DEPENDENCIAS:
  ‚Ä¢ nginx: 1.18.0 ‚Üí 1.20.2
  ‚Ä¢ python3: 3.9.2 ‚Üí 3.11.0
  ‚Ä¢ certbot: 1.21.0 ‚Üí 1.32.0

TIEMPO ESTIMADO: 15 minutos
REINICIO REQUERIDO: S√≠
        """
        
        self.d.scrollbox(updates_text, height=18, width=60, title="Actualizaciones del Sistema")
        
        if self.d.yesno("¬øProceder con las actualizaciones?", height=8, width=50) == self.d.OK:
            self.d.gauge_start("Actualizando sistema...", title="Actualizaci√≥n en Progreso")
            
            try:
                # Simulaci√≥n de actualizaci√≥n
                tasks = [
                    "Descargando actualizaciones...",
                    "Instalando actualizaciones de seguridad...",
                    "Actualizando webapp-manager...",
                    "Actualizando dependencias...",
                    "Finalizando actualizaci√≥n..."
                ]
                
                for i, task in enumerate(tasks):
                    progress = int((i + 1) / len(tasks) * 100)
                    self.d.gauge_update(progress, task)
                    time.sleep(2)
                
                self.d.gauge_stop()
                self.d.msgbox("‚úÖ Actualizaci√≥n completada\n\n‚ö†Ô∏è Se requiere reiniciar el sistema", height=8, width=50)
                
            except Exception as e:
                self.d.gauge_stop()
                self.show_error(f"Error en la actualizaci√≥n: {str(e)}")
    
    def system_optimize(self):
        """Optimizar sistema"""
        optimize_text = """
OPTIMIZACI√ìN DEL SISTEMA
{'=' * 24}

AN√ÅLISIS ACTUAL:
  ‚Ä¢ Uso de memoria: 68% (optimizable)
  ‚Ä¢ Servicios innecesarios: 3 detectados
  ‚Ä¢ Configuraci√≥n nginx: sub√≥ptima
  ‚Ä¢ √çndices de base de datos: fragmentados

OPTIMIZACIONES DISPONIBLES:
  ‚úì Ajustar configuraci√≥n de memoria
  ‚úì Deshabilitar servicios innecesarios
  ‚úì Optimizar configuraci√≥n nginx
  ‚úì Reindexar bases de datos
  ‚úì Configurar swappiness
  ‚úì Ajustar l√≠mites de archivos abiertos

MEJORAS ESTIMADAS:
  ‚Ä¢ Rendimiento: +25%
  ‚Ä¢ Uso de memoria: -15%
  ‚Ä¢ Tiempo de respuesta: -20%
  ‚Ä¢ Estabilidad: +10%
        """
        
        self.d.scrollbox(optimize_text, height=18, width=60, title="Optimizaci√≥n del Sistema")
        
        if self.d.yesno("¬øProceder con la optimizaci√≥n?", height=8, width=50) == self.d.OK:
            self.d.gauge_start("Optimizando sistema...", title="Optimizaci√≥n en Progreso")
            
            try:
                # Simulaci√≥n de optimizaci√≥n
                tasks = [
                    "Analizando configuraci√≥n actual...",
                    "Optimizando configuraci√≥n de memoria...",
                    "Ajustando configuraci√≥n nginx...",
                    "Optimizando bases de datos...",
                    "Aplicando configuraciones..."
                ]
                
                for i, task in enumerate(tasks):
                    progress = int((i + 1) / len(tasks) * 100)
                    self.d.gauge_update(progress, task)
                    time.sleep(2)
                
                self.d.gauge_stop()
                self.d.msgbox("‚úÖ Optimizaci√≥n completada\n\nRendimiento mejorado en 25%", height=8, width=40)
                
            except Exception as e:
                self.d.gauge_stop()
                self.show_error(f"Error en la optimizaci√≥n: {str(e)}")
    
    def system_check(self):
        """Verificar integridad del sistema"""
        check_text = """
VERIFICACI√ìN DE INTEGRIDAD
{'=' * 26}

SISTEMA DE ARCHIVOS:
  ‚úÖ Permisos correctos
  ‚úÖ Espacio disponible suficiente
  ‚úÖ Inodos disponibles
  ‚ö†Ô∏è Archivos hu√©rfanos detectados: 3

CONFIGURACI√ìN:
  ‚úÖ Archivos de configuraci√≥n v√°lidos
  ‚úÖ Sintaxis nginx correcta
  ‚úÖ Servicios systemd v√°lidos
  ‚úÖ Variables de entorno configuradas

APLICACIONES:
  ‚úÖ Todas las aplicaciones responden
  ‚úÖ Certificados SSL v√°lidos
  ‚ö†Ô∏è 1 aplicaci√≥n con logs de errores
  ‚úÖ Backups recientes disponibles

SEGURIDAD:
  ‚úÖ Firewall configurado
  ‚úÖ SSH configurado correctamente
  ‚úÖ Actualizaciones de seguridad instaladas
  ‚úÖ Permisos de usuario correctos

RECOMENDACIONES:
  ‚Ä¢ Limpiar archivos hu√©rfanos
  ‚Ä¢ Revisar logs de errores de aplicaci√≥n
  ‚Ä¢ Actualizar certificados pr√≥ximos a vencer
        """
        
        self.d.scrollbox(check_text, height=20, width=70, title="Verificaci√≥n de Integridad")
    
    def system_repair(self):
        """Reparar sistema"""
        repair_text = """
REPARACI√ìN DEL SISTEMA
{'=' * 22}

PROBLEMAS DETECTADOS:
  üîß Archivos de configuraci√≥n corruptos: 2
  üîß Servicios no iniciados: 1
  üîß Permisos incorrectos: 5 archivos
  üîß Enlaces simb√≥licos rotos: 3

REPARACIONES AUTOM√ÅTICAS:
  ‚úì Regenerar configuraciones nginx
  ‚úì Reiniciar servicios problem√°ticos
  ‚úì Corregir permisos de archivos
  ‚úì Recrear enlaces simb√≥licos
  ‚úì Verificar integridad de paquetes

REPARACIONES MANUALES:
  ‚Ä¢ Revisar configuraci√≥n personalizada
  ‚Ä¢ Validar variables de entorno
  ‚Ä¢ Comprobar conectividad externa

TIEMPO ESTIMADO: 5 minutos
REINICIO REQUERIDO: No
        """
        
        self.d.scrollbox(repair_text, height=18, width=60, title="Reparaci√≥n del Sistema")
        
        if self.d.yesno("¬øProceder con la reparaci√≥n autom√°tica?", height=8, width=50) == self.d.OK:
            self.d.gauge_start("Reparando sistema...", title="Reparaci√≥n en Progreso")
            
            try:
                # Simulaci√≥n de reparaci√≥n
                tasks = [
                    "Analizando problemas...",
                    "Regenerando configuraciones...",
                    "Corrigiendo permisos...",
                    "Recreando enlaces...",
                    "Verificando reparaciones..."
                ]
                
                for i, task in enumerate(tasks):
                    progress = int((i + 1) / len(tasks) * 100)
                    self.d.gauge_update(progress, task)
                    time.sleep(1.5)
                
                self.d.gauge_stop()
                self.d.msgbox("‚úÖ Reparaci√≥n completada\n\nTodos los problemas han sido corregidos", height=8, width=50)
                
            except Exception as e:
                self.d.gauge_stop()
                self.show_error(f"Error en la reparaci√≥n: {str(e)}")
    
    def system_config(self):
        """Configuraci√≥n del sistema"""
        config_text = """
CONFIGURACI√ìN DEL SISTEMA
{'=' * 25}

UBICACIONES DE CONFIGURACI√ìN:
  ‚Ä¢ Global: /etc/webapp-manager/
  ‚Ä¢ Usuario: ~/.config/webapp-manager/
  ‚Ä¢ Logs: /var/log/webapp-manager/
  ‚Ä¢ Backups: /var/backups/webapp-manager/

CONFIGURACI√ìN ACTUAL:
  ‚Ä¢ Modo: Producci√≥n
  ‚Ä¢ Log Level: INFO
  ‚Ä¢ Backup autom√°tico: Habilitado
  ‚Ä¢ SSL autom√°tico: Habilitado
  ‚Ä¢ Monitoreo: Habilitado

ARCHIVOS DE CONFIGURACI√ìN:
  ‚Ä¢ config.yaml: Configuraci√≥n principal
  ‚Ä¢ nginx.conf.template: Plantilla nginx
  ‚Ä¢ systemd.service.template: Plantilla systemd
  ‚Ä¢ backup.conf: Configuraci√≥n de backups

VARIABLES DE ENTORNO:
  ‚Ä¢ WEBAPP_MANAGER_MODE=production
  ‚Ä¢ WEBAPP_MANAGER_LOG_LEVEL=info
  ‚Ä¢ WEBAPP_MANAGER_BACKUP_ENABLED=true
  ‚Ä¢ WEBAPP_MANAGER_SSL_ENABLED=true

Para editar la configuraci√≥n:
  nano /etc/webapp-manager/config.yaml
        """
        
        self.d.scrollbox(config_text, height=20, width=70, title="Configuraci√≥n del Sistema")
    
    def show_system_logs(self):
        """Mostrar logs del sistema"""
        log_choices = [
            ("webapp-manager", "üìã Logs de WebApp Manager"),
            ("nginx", "üåê Logs de Nginx"),
            ("system", "üíª Logs del Sistema"),
            ("error", "‚ùå Logs de Errores"),
            ("access", "üîç Logs de Acceso"),
            ("back", "‚¨ÖÔ∏è Volver")
        ]
        
        while True:
            code, tag = self.d.menu(
                "Selecciona los logs a ver:",
                choices=log_choices,
                height=12,
                width=50,
                title="Logs del Sistema"
            )
            
            if code != self.d.OK or tag == "back":
                break
                
            if tag == "webapp-manager":
                self.show_webapp_logs()
            elif tag == "nginx":
                self.show_nginx_logs()
            elif tag == "system":
                self.show_system_logs_detail()
            elif tag == "error":
                self.show_error_logs()
            elif tag == "access":
                self.show_access_logs()
    
    def show_webapp_logs(self):
        """Mostrar logs de WebApp Manager"""
        logs_text = """
LOGS DE WEBAPP MANAGER
{'=' * 21}

2024-01-15 10:30:22 [INFO] Sistema iniciado correctamente
2024-01-15 10:30:23 [INFO] Cargando configuraci√≥n desde /etc/webapp-manager/config.yaml
2024-01-15 10:30:24 [INFO] Inicializando servicios del sistema
2024-01-15 10:30:25 [INFO] Verificando aplicaciones desplegadas
2024-01-15 10:30:26 [INFO] Encontradas 5 aplicaciones activas
2024-01-15 10:45:12 [INFO] Iniciando despliegue de aplicaci√≥n: test.example.com
2024-01-15 10:45:13 [INFO] Tipo de aplicaci√≥n detectado: Next.js
2024-01-15 10:45:14 [INFO] Descargando c√≥digo fuente desde Git
2024-01-15 10:45:30 [INFO] Instalando dependencias npm
2024-01-15 10:47:15 [INFO] Compilando aplicaci√≥n Next.js
2024-01-15 10:48:45 [INFO] Configurando nginx para test.example.com
2024-01-15 10:48:46 [INFO] Creando servicio systemd
2024-01-15 10:48:47 [INFO] Iniciando servicio test.example.com
2024-01-15 10:48:48 [INFO] Configurando certificado SSL
2024-01-15 10:49:15 [INFO] Certificado SSL configurado correctamente
2024-01-15 10:49:16 [INFO] Despliegue completado exitosamente
2024-01-15 11:15:33 [INFO] Actualizando aplicaci√≥n: api.example.com
2024-01-15 11:15:34 [INFO] Creando backup antes de actualizar
2024-01-15 11:15:45 [INFO] Backup creado: backup-api.example.com-20240115.tar.gz
2024-01-15 11:15:46 [INFO] Actualizando c√≥digo fuente
2024-01-15 11:16:12 [INFO] Reinstalando dependencias
2024-01-15 11:17:23 [INFO] Reiniciando servicio
2024-01-15 11:17:25 [INFO] Actualizaci√≥n completada
        """
        
        self.d.scrollbox(logs_text, height=20, width=80, title="Logs de WebApp Manager")
    
    def show_nginx_logs(self):
        """Mostrar logs de Nginx"""
        logs_text = """
LOGS DE NGINX
{'=' * 13}

ACCESS LOG:
2024-01-15 10:30:22 192.168.1.100 GET /api/status 200 234
2024-01-15 10:30:25 192.168.1.101 GET / 200 1456
2024-01-15 10:30:28 192.168.1.102 GET /admin 401 567
2024-01-15 10:30:30 192.168.1.100 POST /api/login 200 89
2024-01-15 10:30:33 192.168.1.103 GET /dashboard 200 2345

ERROR LOG:
2024-01-15 10:25:15 [error] 1234#0: *5678 connect() failed (111: Connection refused) while connecting to upstream, client: 192.168.1.100, server: api.example.com, request: "GET /api/users HTTP/1.1", upstream: "http://127.0.0.1:8000/api/users", host: "api.example.com"
2024-01-15 10:25:16 [warn] 1234#0: *5679 upstream server temporarily disabled while connecting to upstream, client: 192.168.1.101, server: app.example.com, request: "GET /health HTTP/1.1", upstream: "http://127.0.0.1:3000/health", host: "app.example.com"

CONFIGURACI√ìN:
‚úÖ Sintaxis v√°lida
‚úÖ Todos los sitios activos
‚úÖ SSL configurado correctamente
‚úÖ Proxy reverso funcionando
        """
        
        self.d.scrollbox(logs_text, height=20, width=80, title="Logs de Nginx")
    
    def show_system_logs_detail(self):
        """Mostrar logs detallados del sistema"""
        logs_text = """
LOGS DEL SISTEMA
{'=' * 16}

SYSTEMD JOURNAL:
2024-01-15 10:30:22 systemd[1]: Started WebApp Manager Service
2024-01-15 10:30:23 systemd[1]: Started nginx - high performance web server
2024-01-15 10:30:24 systemd[1]: Started Let's Encrypt renewal service
2024-01-15 10:30:25 systemd[1]: Started Daily webapp-manager backup

KERNEL LOG:
2024-01-15 10:30:20 kernel: [12345.678] webapp-manager loaded successfully
2024-01-15 10:30:21 kernel: [12346.789] nginx worker process started

AUTHENTICATION LOG:
2024-01-15 10:30:22 sshd[1234]: Accepted publickey for admin from 192.168.1.100
2024-01-15 10:30:23 sudo: admin : TTY=pts/0 ; PWD=/home/admin ; USER=root ; COMMAND=/usr/bin/webapp-manager

CRON LOG:
2024-01-15 02:00:01 CRON[5678]: (root) CMD (/usr/local/bin/webapp-manager backup --auto)
2024-01-15 02:00:02 CRON[5679]: (root) CMD (certbot renew --quiet)
        """
        
        self.d.scrollbox(logs_text, height=20, width=80, title="Logs del Sistema")
    
    def show_error_logs(self):
        """Mostrar logs de errores"""
        logs_text = """
LOGS DE ERRORES
{'=' * 15}

APLICACIONES:
2024-01-15 10:25:15 [ERROR] api.example.com: Connection refused to database
2024-01-15 10:25:16 [ERROR] app.example.com: Memory limit exceeded
2024-01-15 10:25:17 [WARN] test.example.com: Slow query detected (5.2s)

SISTEMA:
2024-01-15 10:20:10 [ERROR] nginx: worker process 1234 exited with code 1
2024-01-15 10:20:11 [ERROR] systemd: Failed to start service api.example.com
2024-01-15 10:20:12 [WARN] disk space low on /var/log (95% used)

SEGURIDAD:
2024-01-15 09:45:30 [WARN] Failed login attempt from 192.168.1.200
2024-01-15 09:45:31 [ERROR] SSL certificate expired for old.example.com
2024-01-15 09:45:32 [INFO] Blocked suspicious request from 10.0.0.1

SOLUCIONES SUGERIDAS:
‚Ä¢ Verificar conectividad de base de datos
‚Ä¢ Aumentar l√≠mites de memoria
‚Ä¢ Optimizar consultas lentas
‚Ä¢ Renovar certificados SSL
‚Ä¢ Revisar configuraci√≥n de firewall
        """
        
        self.d.scrollbox(logs_text, height=20, width=80, title="Logs de Errores")
    
    def show_access_logs(self):
        """Mostrar logs de acceso"""
        logs_text = """
LOGS DE ACCESO
{'=' * 14}

RESUMEN DEL TR√ÅFICO:
  ‚Ä¢ Solicitudes totales hoy: 12,847
  ‚Ä¢ Solicitudes √∫nicas: 3,421
  ‚Ä¢ Errores 4xx: 234 (1.8%)
  ‚Ä¢ Errores 5xx: 12 (0.1%)
  ‚Ä¢ Tiempo promedio de respuesta: 245ms

TOP P√ÅGINAS:
  1. /api/status - 2,847 solicitudes
  2. /dashboard - 1,923 solicitudes
  3. /admin - 1,456 solicitudes
  4. /api/users - 1,234 solicitudes
  5. /login - 987 solicitudes

TOP IPs:
  1. 192.168.1.100 - 2,134 solicitudes
  2. 192.168.1.101 - 1,876 solicitudes
  3. 192.168.1.102 - 1,234 solicitudes
  4. 192.168.1.103 - 987 solicitudes
  5. 192.168.1.104 - 765 solicitudes

C√ìDIGOS DE ESTADO:
  ‚Ä¢ 200 OK: 11,234 (87.4%)
  ‚Ä¢ 301 Moved: 567 (4.4%)
  ‚Ä¢ 404 Not Found: 234 (1.8%)
  ‚Ä¢ 401 Unauthorized: 123 (1.0%)
  ‚Ä¢ 500 Internal Error: 12 (0.1%)

M√âTODOS HTTP:
  ‚Ä¢ GET: 9,876 (76.9%)
  ‚Ä¢ POST: 2,345 (18.3%)
  ‚Ä¢ PUT: 456 (3.5%)
  ‚Ä¢ DELETE: 170 (1.3%)
        """
        
        self.d.scrollbox(logs_text, height=20, width=70, title="Logs de Acceso")
    
    def show_error(self, message: str):
        """Mostrar mensaje de error"""
        self.d.msgbox(
            f"‚ùå ERROR\n\n{message}",
            height=10,
            width=50,
            title="Error"
        )

    def execute_with_progress(self, func, *args, **kwargs):
        """Ejecutar funci√≥n con progreso y manejo de logs limpios"""
        try:
            # Mostrar progreso
            self.d.infobox("Ejecutando operaci√≥n...", height=5, width=40)
            
            # Ejecutar funci√≥n
            result = func(*args, **kwargs)
            
            # Si el resultado es un string con logs, limpiarlo
            if isinstance(result, str) and result:
                clean_result = self.format_log_for_gui(result)
                return clean_result
            
            return result
            
        except Exception as e:
            self.show_error(f"Error ejecutando operaci√≥n: {e}")
            return None
