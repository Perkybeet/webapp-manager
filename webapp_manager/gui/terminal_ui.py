"""
Interfaz gr√°fica de terminal para WebApp Manager
"""

import sys
import time
from pathlib import Path
from typing import Optional, List, Dict, Any
import json

try:
    from rich.console import Console
    from rich.table import Table
    from rich.panel import Panel
    from rich.layout import Layout
    from rich.live import Live
    from rich.text import Text
    from rich.prompt import Prompt, Confirm
    from rich.progress import Progress, TaskID
    from rich.markdown import Markdown
    from rich.syntax import Syntax
    from rich.columns import Columns
    from rich.align import Align
    RICH_AVAILABLE = True
except ImportError:
    RICH_AVAILABLE = False

from ..core.manager import WebAppManager
from ..utils.colors import Colors
from ..models.app_config import AppConfig


class TerminalUI:
    """Interfaz gr√°fica de terminal para WebApp Manager"""
    
    def __init__(self, file_service=None, app_service=None):
        if not RICH_AVAILABLE:
            print("‚ö†Ô∏è  Para usar la interfaz gr√°fica, instala: pip install rich")
            sys.exit(1)
        
        self.console = Console()
        
        # Inicializar servicios - SIEMPRE inicializar manager
        self.manager = WebAppManager()
        self.file_service = file_service
        self.app_service = app_service
        
        self.current_menu = "main"
        self.running = True
    
    def run(self):
        """Ejecutar la interfaz gr√°fica"""
        self.show_welcome()
        
        while self.running:
            try:
                if self.current_menu == "main":
                    self.show_main_menu()
                elif self.current_menu == "apps":
                    self.show_apps_menu()
                elif self.current_menu == "deploy":
                    self.show_deploy_menu()
                elif self.current_menu == "system":
                    self.show_system_menu()
                else:
                    self.current_menu = "main"
            except KeyboardInterrupt:
                if Confirm.ask("¬øSalir de WebApp Manager?"):
                    self.running = False
            except Exception as e:
                self.console.print(f"‚ùå Error: {e}", style="red")
                Prompt.ask("Presiona Enter para continuar")
    
    def show_welcome(self):
        """Mostrar pantalla de bienvenida"""
        self.console.clear()
        
        welcome_text = """
# üöÄ WebApp Manager v3.0

Sistema modular de gesti√≥n de aplicaciones web con nginx proxy reverso

## Caracter√≠sticas
- üîß Despliegue autom√°tico de aplicaciones
- üåê Configuraci√≥n de nginx y SSL
- üìä Monitoreo de servicios
- üîÑ Gesti√≥n de actualizaciones
- üìù Logs centralizados

---
        """
        
        self.console.print(Panel(
            Markdown(welcome_text),
            title="Bienvenido",
            border_style="blue",
            padding=(1, 2)
        ))
        
        Prompt.ask("Presiona Enter para continuar")
    
    def show_main_menu(self):
        """Mostrar men√∫ principal"""
        self.console.clear()
        
        # Header
        header = Panel(
            Align.center("üöÄ WebApp Manager - Panel de Control"),
            style="bold blue"
        )
        self.console.print(header)
        
        # Estad√≠sticas del sistema
        self.show_system_stats()
        
        # Opciones del men√∫
        menu_options = [
            "1. üì± Gestionar Aplicaciones",
            "2. üöÄ Desplegar Nueva Aplicaci√≥n",
            "3. üîß Configuraci√≥n del Sistema",
            "4. üìä Monitoreo y Logs",
            "5. üîÑ Actualizaciones",
            "6. ‚ùì Ayuda",
            "0. üö™ Salir"
        ]
        
        options_panel = Panel(
            "\n".join(menu_options),
            title="Opciones",
            border_style="green"
        )
        self.console.print(options_panel)
        
        choice = Prompt.ask(
            "Selecciona una opci√≥n",
            choices=["0", "1", "2", "3", "4", "5", "6"],
            default="1"
        )
        
        self.handle_main_menu_choice(choice)
    
    def show_system_stats(self):
        """Mostrar estad√≠sticas del sistema"""
        try:
            apps = self.manager.list_apps()
            
            # Contar aplicaciones por estado
            active_count = sum(1 for app in apps if app.status == "active")
            failed_count = sum(1 for app in apps if app.status == "failed")
            total_count = len(apps)
            
            # Crear tabla de estad√≠sticas
            stats_table = Table(show_header=False, box=None, padding=(0, 2))
            stats_table.add_column("Metric", style="cyan")
            stats_table.add_column("Value", style="white")
            
            stats_table.add_row("üì± Total Apps", str(total_count))
            stats_table.add_row("‚úÖ Activas", str(active_count))
            stats_table.add_row("‚ùå Fallidas", str(failed_count))
            stats_table.add_row("üîÑ En L√≠nea", f"{active_count}/{total_count}")
            
            stats_panel = Panel(
                stats_table,
                title="Estado del Sistema",
                border_style="yellow"
            )
            self.console.print(stats_panel)
            
        except Exception as e:
            self.console.print(f"‚ö†Ô∏è  Error obteniendo estad√≠sticas: {e}", style="yellow")
    
    def show_apps_menu(self):
        """Mostrar men√∫ de aplicaciones"""
        self.console.clear()
        
        header = Panel(
            Align.center("üì± Gesti√≥n de Aplicaciones"),
            style="bold green"
        )
        self.console.print(header)
        
        try:
            apps = self.manager.list_apps()
            
            if not apps:
                self.console.print(Panel(
                    "No hay aplicaciones desplegadas",
                    title="Sin Aplicaciones",
                    border_style="yellow"
                ))
            else:
                self.show_apps_table(apps)
            
            # Men√∫ de acciones
            actions = [
                "1. üìã Actualizar Lista",
                "2. üîç Ver Detalles de Aplicaci√≥n",
                "3. üîÑ Reiniciar Aplicaci√≥n",
                "4. üóëÔ∏è  Eliminar Aplicaci√≥n",
                "5. üìä Ver Logs",
                "0. ‚¨ÖÔ∏è  Volver al Men√∫ Principal"
            ]
            
            actions_panel = Panel(
                "\n".join(actions),
                title="Acciones",
                border_style="blue"
            )
            self.console.print(actions_panel)
            
            choice = Prompt.ask(
                "Selecciona una acci√≥n",
                choices=["0", "1", "2", "3", "4", "5"],
                default="1"
            )
            
            self.handle_apps_menu_choice(choice, apps)
            
        except Exception as e:
            self.console.print(f"‚ùå Error: {e}", style="red")
            Prompt.ask("Presiona Enter para continuar")
    
    def show_apps_table(self, apps: List[AppConfig]):
        """Mostrar tabla de aplicaciones"""
        table = Table(title="Aplicaciones Desplegadas")
        
        table.add_column("Dominio", style="cyan")
        table.add_column("Tipo", style="magenta")
        table.add_column("Puerto", style="yellow")
        table.add_column("Estado", style="green")
        table.add_column("SSL", style="blue")
        table.add_column("√öltima Actualizaci√≥n", style="white")
        
        for app in apps:
            try:
                # Proteger contra valores None
                domain = getattr(app, 'domain', 'N/A') or 'N/A'
                app_type = getattr(app, 'app_type', 'N/A') or 'N/A'
                port = str(getattr(app, 'port', 'N/A') or 'N/A')
                status = getattr(app, 'status', 'unknown') or 'unknown'
                ssl = getattr(app, 'ssl', False)
                last_updated = getattr(app, 'last_updated', '') or ''
                
                status_style = "green" if status == "active" else "red"
                ssl_icon = "‚úÖ" if ssl else "‚ùå"
                
                table.add_row(
                    domain,
                    app_type,
                    port,
                    f"[{status_style}]{status}[/{status_style}]",
                    ssl_icon,
                    last_updated[:10] if last_updated else "N/A"
                )
            except Exception as e:
                # Si hay error con una aplicaci√≥n espec√≠fica, mostrar error pero continuar
                table.add_row(
                    "Error",
                    "Error",
                    "Error",
                    "[red]Error[/red]",
                    "‚ùå",
                    "Error"
                )
        
        self.console.print(table)
    
    def show_deploy_menu(self):
        """Mostrar men√∫ de despliegue"""
        self.console.clear()
        
        header = Panel(
            Align.center("üöÄ Desplegar Nueva Aplicaci√≥n"),
            style="bold green"
        )
        self.console.print(header)
        
        # Tipos de aplicaci√≥n soportados
        app_types = [
            "1. üì± Next.js Application",
            "2. üêç FastAPI Application",
            "3. üü¢ Node.js Application",
            "4. üìÑ Static Website",
            "0. ‚¨ÖÔ∏è  Volver al Men√∫ Principal"
        ]
        
        types_panel = Panel(
            "\n".join(app_types),
            title="Tipos de Aplicaci√≥n",
            border_style="blue"
        )
        self.console.print(types_panel)
        
        choice = Prompt.ask(
            "Selecciona el tipo de aplicaci√≥n",
            choices=["0", "1", "2", "3", "4"],
            default="1"
        )
        
        if choice == "0":
            self.current_menu = "main"
            return
        
        # Mapear elecci√≥n a tipo
        type_mapping = {
            "1": "nextjs",
            "2": "fastapi",
            "3": "node",
            "4": "static"
        }
        
        app_type = type_mapping[choice]
        self.deploy_application_wizard(app_type)
    
    def deploy_application_wizard(self, app_type: str):
        """Asistente para desplegar aplicaci√≥n"""
        self.console.print(f"\nüîß Configurando aplicaci√≥n {app_type}...\n")
        
        try:
            # Recopilar informaci√≥n
            domain = Prompt.ask("Dominio de la aplicaci√≥n", default="example.com")
            port = int(Prompt.ask("Puerto", default="3000"))
            source = Prompt.ask("Repositorio o ruta", default="https://github.com/user/repo.git")
            branch = Prompt.ask("Rama", default="main")
            ssl = Confirm.ask("¬øHabilitar SSL?", default=True)
            
            # Comandos opcionales
            build_command = Prompt.ask("Comando de build (opcional)", default="")
            start_command = Prompt.ask("Comando de inicio (opcional)", default="")
            
            # Mostrar resumen
            self.show_deployment_summary(domain, port, app_type, source, branch, ssl, build_command, start_command)
            
            if Confirm.ask("¬øProceder con el despliegue?"):
                self.deploy_with_progress(domain, port, app_type, source, branch, ssl, build_command, start_command)
            else:
                self.console.print("‚ùå Despliegue cancelado")
                
        except ValueError as e:
            self.console.print(f"‚ùå Error en los datos: {e}", style="red")
        except Exception as e:
            self.console.print(f"‚ùå Error inesperado: {e}", style="red")
        
        Prompt.ask("Presiona Enter para continuar")
    
    def show_deployment_summary(self, domain: str, port: int, app_type: str, source: str, 
                              branch: str, ssl: bool, build_command: str, start_command: str):
        """Mostrar resumen del despliegue"""
        summary_data = [
            ("Dominio", domain),
            ("Puerto", str(port)),
            ("Tipo", app_type),
            ("Fuente", source),
            ("Rama", branch),
            ("SSL", "‚úÖ" if ssl else "‚ùå"),
            ("Comando Build", build_command or "Por defecto"),
            ("Comando Start", start_command or "Por defecto")
        ]
        
        table = Table(title="Resumen del Despliegue")
        table.add_column("Par√°metro", style="cyan")
        table.add_column("Valor", style="white")
        
        for param, value in summary_data:
            table.add_row(param, value)
        
        self.console.print(table)
    
    def deploy_with_progress(self, domain: str, port: int, app_type: str, source: str, 
                           branch: str, ssl: bool, build_command: str, start_command: str):
        """Desplegar aplicaci√≥n con barra de progreso"""
        with Progress() as progress:
            task = progress.add_task("Desplegando aplicaci√≥n...", total=100)
            
            try:
                # Validaci√≥n inicial
                progress.update(task, description="[cyan]Validando configuraci√≥n...", completed=10)
                self.console.print(f"üîç Validando configuraci√≥n para {domain}...")
                time.sleep(0.5)
                
                # Obtener c√≥digo fuente
                progress.update(task, description="[cyan]Preparando despliegue...", completed=20)
                self.console.print(f"üì¶ Preparando despliegue para aplicaci√≥n {app_type}...")
                time.sleep(0.5)
                
                # Validar estructura
                progress.update(task, description="[cyan]Validando estructura del proyecto...", completed=30)
                self.console.print(f"üîç Validando estructura del proyecto desde {source}...")
                time.sleep(0.5)
                
                # Instalar dependencias
                progress.update(task, description="[cyan]Instalando dependencias...", completed=50)
                self.console.print(f"üì• Instalando dependencias para {app_type}...")
                time.sleep(1)
                
                # Construir aplicaci√≥n
                progress.update(task, description="[cyan]Construyendo aplicaci√≥n...", completed=70)
                self.console.print(f"üî® Construyendo aplicaci√≥n en puerto {port}...")
                time.sleep(1)
                
                # Configurar servicios
                progress.update(task, description="[cyan]Configurando servicios...", completed=85)
                self.console.print(f"‚öôÔ∏è Configurando nginx y systemd...")
                time.sleep(0.5)
                
                # Desplegar aplicaci√≥n
                progress.update(task, description="[cyan]Desplegando aplicaci√≥n...", completed=95)
                self.console.print(f"üöÄ Iniciando despliegue final...")
                
                result = self.manager.add_app(
                    domain=domain,
                    port=port,
                    app_type=app_type,
                    source_path=source,
                    branch=branch,
                    ssl=ssl,
                    build_command=build_command,
                    start_command=start_command
                )
                
                # Finalizar
                progress.update(task, description="[green]Despliegue completado", completed=100)
                time.sleep(0.5)
                
                if result:
                    self.console.print("‚úÖ Aplicaci√≥n desplegada exitosamente!", style="bold green")
                    self.console.print(f"üåê Aplicaci√≥n disponible en: http{'s' if ssl else ''}://{domain}", style="blue")
                    self.console.print(f"üîó Puerto: {port}", style="blue")
                else:
                    self.console.print("‚ùå Error en el despliegue", style="bold red")
                    self.console.print("üí° Revisa los logs del sistema para m√°s detalles", style="yellow")
                    
            except Exception as e:
                progress.update(task, description="[red]Error en el despliegue", completed=100)
                self.console.print(f"‚ùå Error durante el despliegue: {e}", style="bold red")
                self.console.print("üí° Revisa los logs del sistema para m√°s detalles", style="yellow")
                
            finally:
                # Pausa para que el usuario pueda leer el resultado
                Prompt.ask("\nPresiona Enter para continuar")
    
    def show_system_menu(self):
        """Mostrar men√∫ del sistema"""
        self.console.clear()
        
        header = Panel(
            Align.center("üîß Configuraci√≥n del Sistema"),
            style="bold blue"
        )
        self.console.print(header)
        
        # Informaci√≥n del sistema
        self.show_system_info()
        
        # Opciones del men√∫
        options = [
            "1. üîç Diagn√≥stico del Sistema",
            "2. üßπ Limpiar Archivos Temporales",
            "3. üîÑ Reiniciar Servicios",
            "4. üìã Backup de Configuraci√≥n",
            "5. üîß Configuraci√≥n Avanzada",
            "0. ‚¨ÖÔ∏è  Volver al Men√∫ Principal"
        ]
        
        options_panel = Panel(
            "\n".join(options),
            title="Opciones",
            border_style="green"
        )
        self.console.print(options_panel)
        
        choice = Prompt.ask(
            "Selecciona una opci√≥n",
            choices=["0", "1", "2", "3", "4", "5"],
            default="1"
        )
        
        self.handle_system_menu_choice(choice)
    
    def show_system_info(self):
        """Mostrar informaci√≥n del sistema"""
        try:
            # Informaci√≥n b√°sica del sistema
            info_table = Table(show_header=False, box=None, padding=(0, 2))
            info_table.add_column("Component", style="cyan")
            info_table.add_column("Status", style="white")
            
            # Verificar servicios
            services = ["nginx", "systemd", "node", "python3"]
            for service in services:
                status = "‚úÖ" if self.manager.cmd.run(f"which {service}", check=False) else "‚ùå"
                info_table.add_row(service, status)
            
            info_panel = Panel(
                info_table,
                title="Estado de Servicios",
                border_style="blue"
            )
            self.console.print(info_panel)
            
        except Exception as e:
            self.console.print(f"‚ö†Ô∏è  Error obteniendo informaci√≥n: {e}", style="yellow")
    
    def handle_main_menu_choice(self, choice: str):
        """Manejar elecci√≥n del men√∫ principal"""
        if choice == "0":
            self.running = False
        elif choice == "1":
            self.current_menu = "apps"
        elif choice == "2":
            self.current_menu = "deploy"
        elif choice == "3":
            self.current_menu = "system"
        elif choice == "4":
            self.show_monitoring_menu()
        elif choice == "5":
            self.show_updates_menu()
        elif choice == "6":
            self.show_help()
    
    def handle_apps_menu_choice(self, choice: str, apps: List[AppConfig]):
        """Manejar elecci√≥n del men√∫ de aplicaciones"""
        if choice == "0":
            self.current_menu = "main"
        elif choice == "1":
            pass  # Actualizar lista (ya se hace autom√°ticamente)
        elif choice == "2":
            self.show_app_details(apps)
        elif choice == "3":
            self.restart_app(apps)
        elif choice == "4":
            self.remove_app(apps)
        elif choice == "5":
            self.show_app_logs(apps)
    
    def handle_system_menu_choice(self, choice: str):
        """Manejar elecci√≥n del men√∫ del sistema"""
        if choice == "0":
            self.current_menu = "main"
        elif choice == "1":
            self.run_system_diagnosis()
        elif choice == "2":
            self.clean_temp_files()
        elif choice == "3":
            self.restart_services()
        elif choice == "4":
            self.backup_configuration()
        elif choice == "5":
            self.show_advanced_config()
    
    def show_app_details(self, apps: List[AppConfig]):
        """Mostrar detalles de una aplicaci√≥n"""
        if not apps:
            self.console.print("No hay aplicaciones para mostrar", style="yellow")
            return
        
        try:
            app_names = [getattr(app, 'domain', 'N/A') or 'N/A' for app in apps]
            selected = Prompt.ask(
                "Selecciona una aplicaci√≥n",
                choices=app_names
            )
            
            selected_app = next(app for app in apps if getattr(app, 'domain', '') == selected)
            
            # Mostrar detalles con protecci√≥n contra None
            details_table = Table(title=f"Detalles de {getattr(selected_app, 'domain', 'N/A')}")
            details_table.add_column("Propiedad", style="cyan")
            details_table.add_column("Valor", style="white")
            
            details_table.add_row("Dominio", getattr(selected_app, 'domain', 'N/A') or 'N/A')
            details_table.add_row("Puerto", str(getattr(selected_app, 'port', 'N/A') or 'N/A'))
            details_table.add_row("Tipo", getattr(selected_app, 'app_type', 'N/A') or 'N/A')
            details_table.add_row("Fuente", getattr(selected_app, 'source', 'N/A') or 'N/A')
            details_table.add_row("Rama", getattr(selected_app, 'branch', 'N/A') or 'N/A')
            details_table.add_row("SSL", "‚úÖ" if getattr(selected_app, 'ssl', False) else "‚ùå")
            details_table.add_row("Estado", getattr(selected_app, 'status', 'unknown') or 'unknown')
            
            self.console.print(details_table)
            
        except Exception as e:
            self.console.print(f"‚ùå Error al mostrar detalles: {e}", style="red")
            
        Prompt.ask("Presiona Enter para continuar")
        details_table.add_row("Creado", selected_app.created)
        details_table.add_row("Actualizado", selected_app.last_updated)
        
        self.console.print(details_table)
        Prompt.ask("Presiona Enter para continuar")
    
    def show_monitoring_menu(self):
        """Mostrar men√∫ de monitoreo"""
        self.console.print("üöß Funci√≥n de monitoreo en desarrollo", style="yellow")
        Prompt.ask("Presiona Enter para continuar")
    
    def show_updates_menu(self):
        """Mostrar men√∫ de actualizaciones"""
        self.console.print("üöß Funci√≥n de actualizaciones en desarrollo", style="yellow")
        Prompt.ask("Presiona Enter para continuar")
    
    def show_help(self):
        """Mostrar ayuda"""
        help_text = """
# üìñ Ayuda de WebApp Manager

## Comandos Principales
- `webapp-manager add <domain>` - Desplegar nueva aplicaci√≥n
- `webapp-manager list` - Listar aplicaciones
- `webapp-manager remove <domain>` - Eliminar aplicaci√≥n
- `webapp-manager logs <domain>` - Ver logs

## Tipos de Aplicaci√≥n Soportados
- **Next.js**: Aplicaciones React con SSR
- **FastAPI**: APIs Python modernas
- **Node.js**: Aplicaciones JavaScript
- **Static**: Sitios web est√°ticos

## Configuraci√≥n
- Archivos de configuraci√≥n en `/etc/webapp-manager/`
- Logs en `/var/log/webapp-manager/`
- Aplicaciones en `/var/www/apps/`

---
        """
        
        self.console.print(Panel(
            Markdown(help_text),
            title="Ayuda",
            border_style="blue"
        ))
        Prompt.ask("Presiona Enter para continuar")
    
    def run_system_diagnosis(self):
        """Ejecutar diagn√≥stico del sistema"""
        self.console.print("üîç Ejecutando diagn√≥stico del sistema...", style="blue")
        
        try:
            result = self.manager.diagnose()
            if result:
                self.console.print("‚úÖ Diagn√≥stico completado exitosamente", style="green")
            else:
                self.console.print("‚ö†Ô∏è  Se encontraron problemas", style="yellow")
        except Exception as e:
            self.console.print(f"‚ùå Error en diagn√≥stico: {e}", style="red")
        
        Prompt.ask("Presiona Enter para continuar")
    
    def clean_temp_files(self):
        """Limpiar archivos temporales"""
        self.console.print("üßπ Limpiando archivos temporales...", style="blue")
        # Implementar limpeza
        self.console.print("‚úÖ Archivos temporales eliminados", style="green")
        Prompt.ask("Presiona Enter para continuar")
    
    def restart_services(self):
        """Reiniciar servicios"""
        if Confirm.ask("¬øReiniciar servicios del sistema?"):
            self.console.print("üîÑ Reiniciando servicios...", style="blue")
            # Implementar reinicio
            self.console.print("‚úÖ Servicios reiniciados", style="green")
        Prompt.ask("Presiona Enter para continuar")
    
    def backup_configuration(self):
        """Hacer backup de la configuraci√≥n"""
        self.console.print("üíæ Creando backup de configuraci√≥n...", style="blue")
        # Implementar backup
        self.console.print("‚úÖ Backup creado exitosamente", style="green")
        Prompt.ask("Presiona Enter para continuar")
    
    def show_advanced_config(self):
        """Mostrar configuraci√≥n avanzada"""
        self.console.print("üöß Configuraci√≥n avanzada en desarrollo", style="yellow")
        Prompt.ask("Presiona Enter para continuar")
    
    def restart_app(self, apps: List[AppConfig]):
        """Reiniciar aplicaci√≥n"""
        if not apps:
            self.console.print("No hay aplicaciones para reiniciar", style="yellow")
            return
        
        app_names = [app.domain for app in apps]
        selected = Prompt.ask("Selecciona una aplicaci√≥n para reiniciar", choices=app_names)
        
        if Confirm.ask(f"¬øReiniciar {selected}?"):
            try:
                result = self.manager.restart_app(selected)
                if result:
                    self.console.print(f"‚úÖ {selected} reiniciada exitosamente", style="green")
                else:
                    self.console.print(f"‚ùå Error reiniciando {selected}", style="red")
            except Exception as e:
                self.console.print(f"‚ùå Error: {e}", style="red")
        
        Prompt.ask("Presiona Enter para continuar")
    
    def remove_app(self, apps: List[AppConfig]):
        """Eliminar aplicaci√≥n"""
        if not apps:
            self.console.print("No hay aplicaciones para eliminar", style="yellow")
            return
        
        app_names = [app.domain for app in apps]
        selected = Prompt.ask("Selecciona una aplicaci√≥n para eliminar", choices=app_names)
        
        if Confirm.ask(f"¬øELIMINAR {selected}? Esta acci√≥n no se puede deshacer"):
            try:
                result = self.manager.remove_app(selected)
                if result:
                    self.console.print(f"‚úÖ {selected} eliminada exitosamente", style="green")
                else:
                    self.console.print(f"‚ùå Error eliminando {selected}", style="red")
            except Exception as e:
                self.console.print(f"‚ùå Error: {e}", style="red")
        
        Prompt.ask("Presiona Enter para continuar")
    
    def show_app_logs(self, apps: List[AppConfig]):
        """Mostrar logs de aplicaci√≥n"""
        if not apps:
            self.console.print("No hay aplicaciones para mostrar logs", style="yellow")
            return
        
        app_names = [app.domain for app in apps]
        selected = Prompt.ask("Selecciona una aplicaci√≥n para ver logs", choices=app_names)
        
        try:
            logs = self.manager.get_app_logs(selected, lines=50)
            if logs:
                self.console.print(Panel(
                    Syntax(logs, "log", theme="monokai"),
                    title=f"Logs de {selected}",
                    border_style="blue"
                ))
            else:
                self.console.print("No se encontraron logs", style="yellow")
        except Exception as e:
            self.console.print(f"‚ùå Error obteniendo logs: {e}", style="red")
        
        Prompt.ask("Presiona Enter para continuar")


def main():
    """Punto de entrada para la interfaz gr√°fica"""
    ui = TerminalUI()
    ui.run()


if __name__ == "__main__":
    main()
